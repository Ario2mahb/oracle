{
  "address": "0xDc875208ffDfDEac4Bb59660f2B57aedA5Ea6F76",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isEnable",
          "type": "bool"
        }
      ],
      "name": "GlobalEnable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "OracleEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "mainOracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pivotOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fallbackOracle",
          "type": "address"
        }
      ],
      "name": "TokenConfigAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INVALID_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boundValidator",
      "outputs": [
        {
          "internalType": "contract BoundValidatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum ResilientOracle.OracleRole",
          "name": "role",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "enableOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "enum ResilientOracle.OracleRole",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "getTokenConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address[3]",
              "name": "oracles",
              "type": "address[3]"
            },
            {
              "internalType": "bool[3]",
              "name": "enableFlagsForOracles",
              "type": "bool[3]"
            }
          ],
          "internalType": "struct ResilientOracle.TokenConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract BoundValidatorInterface",
          "name": "_boundValidator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "enum ResilientOracle.OracleRole",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address[3]",
              "name": "oracles",
              "type": "address[3]"
            },
            {
              "internalType": "bool[3]",
              "name": "enableFlagsForOracles",
              "type": "bool[3]"
            }
          ],
          "internalType": "struct ResilientOracle.TokenConfig",
          "name": "tokenConfig",
          "type": "tuple"
        }
      ],
      "name": "setTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address[3]",
              "name": "oracles",
              "type": "address[3]"
            },
            {
              "internalType": "bool[3]",
              "name": "enableFlagsForOracles",
              "type": "bool[3]"
            }
          ],
          "internalType": "struct ResilientOracle.TokenConfig[]",
          "name": "tokenConfigs_",
          "type": "tuple[]"
        }
      ],
      "name": "setTokenConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd30f59ef58e342d2c2cc5e88e9037fb0b245763a20702390f0aeddab4ff562fc",
  "receipt": {
    "to": null,
    "from": "0xFbaec94e7663eb57D0196206620a36FC131c943C",
    "contractAddress": "0xDc875208ffDfDEac4Bb59660f2B57aedA5Ea6F76",
    "transactionIndex": 0,
    "gasUsed": "1552040",
    "logsBloom": "0x
    "blockHash": "0x971a2eab8c544bab40eb8ce39d6aa081b5ba004d78ec524ef8251a2f9a7d3b4e",
    "transactionHash": "0xd30f59ef58e342d2c2cc5e88e9037fb0b245763a20702390f0aeddab4ff562fc",
    "logs": [],
    "blockNumber": 16047440,
    "cumulativeGasUsed": "1552040",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7512ff8bb5807f474eea59a25786c986",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isEnable\",\"type\":\"bool\"}],\"name\":\"GlobalEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"OracleEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mainOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pivotOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"}],\"name\":\"TokenConfigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVALID_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boundValidator\",\"outputs\":[{\"internalType\":\"contract BoundValidatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum ResilientOracle.OracleRole\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"enum ResilientOracle.OracleRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"oracles\",\"type\":\"address[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"enableFlagsForOracles\",\"type\":\"bool[3]\"}],\"internalType\":\"struct ResilientOracle.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BoundValidatorInterface\",\"name\":\"_boundValidator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"enum ResilientOracle.OracleRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"oracles\",\"type\":\"address[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"enableFlagsForOracles\",\"type\":\"bool[3]\"}],\"internalType\":\"struct ResilientOracle.TokenConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"oracles\",\"type\":\"address[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"enableFlagsForOracles\",\"type\":\"bool[3]\"}],\"internalType\":\"struct ResilientOracle.TokenConfig[]\",\"name\":\"tokenConfigs_\",\"type\":\"tuple[]\"}],\"name\":\"setTokenConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"enableOracle(address,uint8,bool)\":{\"params\":{\"asset\":\"asset address\",\"enable\":\"expected status\",\"role\":\"oracle role\"}},\"getOracle(address,uint8)\":{\"params\":{\"role\":\"oracle role\",\"vToken\":\"vtoken address\"}},\"getTokenConfig(address)\":{\"details\":\"Get token config by vToken address\",\"params\":{\"vToken\":\"vtoken address\"}},\"getUnderlyingPrice(address)\":{\"params\":{\"vToken\":\"vToken address\"},\"returns\":{\"_0\":\"price USD price in 18 decimals\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOracle(address,address,uint8)\":{\"params\":{\"asset\":\"asset address\",\"oracle\":\"oracle address\",\"role\":\"oracle role\"}},\"setTokenConfig((address,address[3],bool[3]))\":{\"params\":{\"tokenConfig\":\"token config struct\"}},\"setTokenConfigs((address,address[3],bool[3])[])\":{\"params\":{\"tokenConfigs_\":\"token config array\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePrice(address)\":{\"params\":{\"vToken\":\"vToken address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"enableOracle(address,uint8,bool)\":{\"notice\":\"Enable/disable oracle for the input vToken, input vToken MUST exist\"},\"getOracle(address,uint8)\":{\"notice\":\"Get oracle & enabling status by vToken address\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get price of underlying asset of the input vToken, check flow: - check the global pausing status - check price from main oracle against pivot oracle - check price from fallback oracle against pivot oracle or main oracle if fails\"},\"pause()\":{\"notice\":\"Pause protocol\"},\"setOracle(address,address,uint8)\":{\"notice\":\"Set oracle of any type for the input vToken, input vToken MUST exist\"},\"setTokenConfig((address,address[3],bool[3]))\":{\"notice\":\"Set single token configs, vToken MUST HAVE NOT be added before, and main oracle MUST NOT be zero address\"},\"setTokenConfigs((address,address[3],bool[3])[])\":{\"notice\":\"Batch set token configs\"},\"unpause()\":{\"notice\":\"Unpause protocol\"},\"updatePrice(address)\":{\"notice\":\"Currently it calls the updateTwap\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ResilientOracle.sol\":\"ResilientOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/ResilientOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/VBep20Interface.sol\\\";\\nimport \\\"./interfaces/OracleInterface.sol\\\";\\n\\ncontract ResilientOracle is OwnableUpgradeable, PausableUpgradeable, ResilientOracleInterface {\\n    uint256 public constant INVALID_PRICE = 0;\\n\\n    BoundValidatorInterface public boundValidator;\\n\\n    /**\\n     * @dev oracle role, we have 3 roles at the moment\\n     * MAIN: The most trustworthy price source\\n     * PIVOT: Not so trustworthy price source, used as a loose sanity checker\\n     * FALLBACK: The backup source when main oracle price is invalidated\\n     */\\n    enum OracleRole {\\n        MAIN,\\n        PIVOT,\\n        FALLBACK\\n    }\\n\\n    struct TokenConfig {\\n        /// @notice asset address\\n        address asset;\\n        /// @notice `oracles` stores the oracles in the order of: [main, pivot, fallback],\\n        /// it can be indexed with enum OracleRole value\\n        address[3] oracles;\\n        /// @notice `enableFlagsForOracles` stores the oracle enable statuses\\n        /// for each oracle in the same order as `oracles`\\n        bool[3] enableFlagsForOracles;\\n    }\\n\\n    mapping(address => TokenConfig) private tokenConfigs;\\n\\n    event GlobalEnable(bool indexed isEnable);\\n    event TokenConfigAdded(\\n        address indexed asset,\\n        address indexed mainOracle,\\n        address indexed pivotOracle,\\n        address fallbackOracle\\n    );\\n    event OracleSet(address indexed asset, address indexed oracle, uint256 indexed role);\\n    event OracleEnabled(address indexed asset, uint256 indexed role, bool indexed enable);\\n\\n    modifier notNullAddress(address someone) {\\n        require(someone != address(0), \\\"can't be zero address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check whether token config exist by checking whether vToken is zero address\\n     * @dev vToken can't be set to zero, so it's suitable to be used to check\\n     * @param asset asset address\\n     */\\n    modifier checkTokenConfigExistance(address asset) {\\n        require(tokenConfigs[asset].asset != address(0), \\\"token config must exist\\\");\\n        _;\\n    }\\n\\n    function initialize(BoundValidatorInterface _boundValidator) public initializer {\\n        require(address(_boundValidator) != address(0), \\\"invaliud bound validator address\\\");\\n        boundValidator = _boundValidator;\\n\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    /**\\n     * @notice Pause protocol\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause protocol\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Get token config by vToken address\\n     * @param vToken vtoken address\\n     */\\n    function getTokenConfig(address vToken) external view returns (TokenConfig memory) {\\n        address asset = VBep20Interface(vToken).underlying();\\n        return tokenConfigs[asset];\\n    }\\n\\n    /**\\n     * @notice Get oracle & enabling status by vToken address\\n     * @param vToken vtoken address\\n     * @param role oracle role\\n     */\\n    function getOracle(address vToken, OracleRole role) public view returns (address oracle, bool enabled) {\\n        address asset = VBep20Interface(vToken).underlying();\\n        oracle = tokenConfigs[asset].oracles[uint256(role)];\\n        enabled = tokenConfigs[asset].enableFlagsForOracles[uint256(role)];\\n    }\\n\\n    /**\\n     * @notice Batch set token configs\\n     * @param tokenConfigs_ token config array\\n     */\\n    function setTokenConfigs(TokenConfig[] memory tokenConfigs_) external onlyOwner {\\n        require(tokenConfigs_.length != 0, \\\"length can't be 0\\\");\\n        for (uint256 i = 0; i < tokenConfigs_.length; i++) {\\n            setTokenConfig(tokenConfigs_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set single token configs, vToken MUST HAVE NOT be added before, and main oracle MUST NOT be zero address\\n     * @param tokenConfig token config struct\\n     */\\n    function setTokenConfig(TokenConfig memory tokenConfig)\\n        public\\n        onlyOwner\\n        notNullAddress(tokenConfig.asset)\\n        notNullAddress(tokenConfig.oracles[uint256(OracleRole.MAIN)])\\n    {\\n        tokenConfigs[tokenConfig.asset] = tokenConfig;\\n        emit TokenConfigAdded(\\n            tokenConfig.asset,\\n            tokenConfig.oracles[uint256(OracleRole.MAIN)],\\n            tokenConfig.oracles[uint256(OracleRole.PIVOT)],\\n            tokenConfig.oracles[uint256(OracleRole.FALLBACK)]\\n        );\\n    }\\n\\n    /**\\n     * @notice Set oracle of any type for the input vToken, input vToken MUST exist\\n     * @param asset asset address\\n     * @param oracle oracle address\\n     * @param role oracle role\\n     */\\n    function setOracle(\\n        address asset,\\n        address oracle,\\n        OracleRole role\\n    ) external onlyOwner notNullAddress(asset) checkTokenConfigExistance(asset) {\\n        require(!(oracle == address(0) && role == OracleRole.MAIN), \\\"can't set zero address to main oracle\\\");\\n        tokenConfigs[asset].oracles[uint256(role)] = oracle;\\n        emit OracleSet(asset, oracle, uint256(role));\\n    }\\n\\n    /**\\n     * @notice Enable/disable oracle for the input vToken, input vToken MUST exist\\n     * @param asset asset address\\n     * @param role oracle role\\n     * @param enable expected status\\n     */\\n    function enableOracle(\\n        address asset,\\n        OracleRole role,\\n        bool enable\\n    ) external onlyOwner notNullAddress(asset) checkTokenConfigExistance(asset) {\\n        tokenConfigs[asset].enableFlagsForOracles[uint256(role)] = enable;\\n        emit OracleEnabled(asset, uint256(role), enable);\\n    }\\n\\n    /**\\n     * @notice Currently it calls the updateTwap\\n     * @param vToken vToken address\\n     */\\n    function updatePrice(address vToken) external override {\\n        (address pivotOracle, bool pivotOracleEnabled) = getOracle(vToken, OracleRole.PIVOT);\\n        if (pivotOracle != address(0) && pivotOracleEnabled) {\\n            //if PIVOT oracle is PythOrcle it will revert so we need to catch the revert\\n            try TwapInterface(pivotOracle).updateTwap(vToken) returns (uint256 _price) {} catch {}\\n        }\\n    }\\n\\n    /**\\n     * @notice Get price of underlying asset of the input vToken, check flow:\\n     * - check the global pausing status\\n     * - check price from main oracle against pivot oracle\\n     * - check price from fallback oracle against pivot oracle or main oracle if fails\\n     * @param vToken vToken address\\n     * @return price USD price in 18 decimals\\n     */\\n    function getUnderlyingPrice(address vToken) external view override returns (uint256) {\\n        require(!paused(), \\\"resilient oracle is paused\\\");\\n\\n        uint256 price = _getMainOraclePrice(vToken);\\n        if (price == INVALID_PRICE) {\\n            price = _getFallbackOraclePrice(vToken);\\n        }\\n\\n        require(price != INVALID_PRICE, \\\"invalid resilient oracle price\\\");\\n        return price;\\n    }\\n\\n    /**\\n     * @notice This function won't revert when price is 0, because the fallback oracle may come to play later\\n     * @param vToken vToken address\\n     * @return price USD price in 18 decimals\\n     */\\n    function _getMainOraclePrice(address vToken) internal view returns (uint256) {\\n        uint256 price = INVALID_PRICE;\\n\\n        (address mainOracle, bool mainOracleEnabled) = getOracle(vToken, OracleRole.MAIN);\\n        if (mainOracleEnabled && mainOracle != address(0)) {\\n            try OracleInterface(mainOracle).getUnderlyingPrice(vToken) returns (uint256 mainOraclePrice) {\\n                price = mainOraclePrice;\\n\\n                (address pivotOracle, bool pivotOracleEnabled) = getOracle(vToken, OracleRole.PIVOT);\\n\\n                if (pivotOracleEnabled && pivotOracle != address(0)) {\\n                    try OracleInterface(pivotOracle).getUnderlyingPrice(vToken) returns (uint256 pivotPrice) {\\n                        if (pivotPrice != INVALID_PRICE) {\\n                            bool isPriceValid = boundValidator.validatePriceWithAnchorPrice(vToken, price, pivotPrice);\\n                            if (!isPriceValid) {\\n                                return INVALID_PRICE;\\n                            }\\n                        }\\n                    } catch {}\\n                }\\n            } catch {}\\n        }\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @notice This function won't revert when price is 0, because the getUnderlyingPrice checks if pirce is > 0\\n     * @param vToken vToken address\\n     * @return price USD price in 18 decimals\\n     */\\n    function _getFallbackOraclePrice(address vToken) internal view returns (uint256) {\\n        uint256 price = INVALID_PRICE;\\n        bool compareWithMain = false;\\n\\n        (address fallbackOracle, bool fallbackEnabled) = getOracle(vToken, OracleRole.FALLBACK);\\n        if (fallbackEnabled && fallbackOracle != address(0)) {\\n            try OracleInterface(fallbackOracle).getUnderlyingPrice(vToken) returns (uint256 fallbackOraclePrice) {\\n                price = fallbackOraclePrice;\\n\\n                (address pivotOracle, bool pivotOracleEnabled) = getOracle(vToken, OracleRole.PIVOT);\\n                if (pivotOracleEnabled && pivotOracle != address(0)) {\\n                    try OracleInterface(pivotOracle).getUnderlyingPrice(vToken) returns (uint256 pivotPrice) {\\n                        if (pivotPrice != INVALID_PRICE) {\\n                            bool isPriceValid = boundValidator.validatePriceWithAnchorPrice(vToken, price, pivotPrice);\\n                            if (!isPriceValid) {\\n                                compareWithMain = true;\\n                            }\\n                        } else {\\n                            compareWithMain = true;\\n                        }\\n                    } catch {\\n                        compareWithMain = true;\\n                    }\\n                } else {\\n                    compareWithMain = true;\\n                }\\n            } catch {}\\n        }\\n\\n        if (compareWithMain) {\\n            (address mainOracle, bool mainOracleEnabled) = getOracle(vToken, OracleRole.MAIN);\\n            if (mainOracleEnabled && mainOracle != address(0)) {\\n                try OracleInterface(mainOracle).getUnderlyingPrice(vToken) returns (uint256 mainOraclePrice) {\\n                    bool isPriceValid = boundValidator.validatePriceWithAnchorPrice(vToken, price, mainOraclePrice);\\n                    if (!isPriceValid) {\\n                        return INVALID_PRICE;\\n                    } else {\\n                        price = mainOraclePrice;\\n                    }\\n                } catch {\\n                    price = INVALID_PRICE;\\n                }\\n            } else {\\n                price = INVALID_PRICE;\\n            }\\n        }\\n\\n        return price;\\n    }\\n}\\n\",\"keccak256\":\"0x1baafe42a7845930cd71f2be924c24b93f32a673c34a3dd83adc9950dedbcc18\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/BEP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface BEP20Interface {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x53aa6d0be81f26e962567f29e9a17f1b73205997c38c6c298e243ef923554c34\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface OracleInterface {\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address vToken) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address vToken,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x474f40570a75a85caa03217fdef1646e22361ad430b0a67f51b2c038668c3836\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/VBep20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BEP20Interface.sol\\\";\\n\\ninterface VBep20Interface is BEP20Interface {\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    function underlying() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf65bba1e926855bbe2796e061755df640fbae160c0fcbcd996087a24d8049a81\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611b1b806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638456cb59116100a2578063a6b1344a11610071578063a6b1344a14610215578063c4d66de814610228578063cb67e3b11461023b578063f2fde38b1461025b578063fc57d4df1461026e57600080fd5b80638456cb59146101b75780638b855da4146101bf5780638da5cb5b146101f157806396e85ced1461020257600080fd5b80634b932b8f116100de5780634b932b8f146101705780634bf39cba146101835780635c975abb14610199578063715018a6146101af57600080fd5b80632cfa387114610110578063333a21b01461012557806333d33494146101385780633f4ba83a14610168575b600080fd5b61012361011e366004611781565b610281565b005b610123610133366004611831565b610317565b60975461014b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610123610433565b61012361017e366004611868565b610445565b61018b600081565b60405190815260200161015f565b60655460ff16604051901515815260200161015f565b610123610585565b610123610597565b6101d26101cd3660046118b1565b6105a7565b604080516001600160a01b03909316835290151560208301520161015f565b6033546001600160a01b031661014b565b6101236102103660046118e6565b6106b2565b610123610223366004611903565b61074f565b6101236102363660046118e6565b61091b565b61024e6102493660046118e6565b610aa5565b60405161015f919061194a565b6101236102693660046118e6565b610be0565b61018b61027c3660046118e6565b610c59565b610289610d25565b80516000036102d35760405162461bcd60e51b815260206004820152601160248201527006c656e6774682063616e2774206265203607c1b60448201526064015b60405180910390fd5b60005b8151811015610313576103018282815181106102f4576102f46119c5565b6020026020010151610317565b8061030b816119db565b9150506102d6565b5050565b61031f610d25565b80516001600160a01b0381166103475760405162461bcd60e51b81526004016102ca90611a02565b6020820151516001600160a01b0381166103735760405162461bcd60e51b81526004016102ca90611a02565b82516001600160a01b039081166000908152609860209081526040909120855181546001600160a01b03191693169290921782558401518491906103bd90600183019060036114b1565b5060408201516103d39060048301906003611509565b505050602083810151808201518151865160409384015193516001600160a01b039485168152928416949184169316917fa51ad01e2270c314a7b78f0c60fe66c723f2d06c121d63fcdce776e654878fc1910160405180910390a4505050565b61043b610d25565b610443610d7f565b565b61044d610d25565b826001600160a01b0381166104745760405162461bcd60e51b81526004016102ca90611a02565b6001600160a01b038085166000908152609860205260409020548591166104d75760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b60448201526064016102ca565b6001600160a01b0385166000908152609860205260409020839060040185600281111561050657610506611a31565b60038110610516576105166119c5565b602091828204019190066101000a81548160ff02191690831515021790555082151584600281111561054a5761054a611a31565b6040516001600160a01b038816907fcf3cad1ec87208efbde5d82a0557484a78d4182c3ad16926a5463bc1f7234b3d90600090a45050505050565b61058d610d25565b6104436000610dd1565b61059f610d25565b610443610e23565b6000806000846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e9190611a47565b6001600160a01b038116600090815260986020526040902090915060010184600281111561063e5761063e611a31565b6003811061064e5761064e6119c5565b01546001600160a01b0382811660009081526098602052604090209116935060040184600281111561068257610682611a31565b60038110610692576106926119c5565b602091828204019190069054906101000a900460ff169150509250929050565b6000806106c08360016105a7565b90925090506001600160a01b038216158015906106da5750805b1561074a5760405163725068a560e01b81526001600160a01b03848116600483015283169063725068a5906024016020604051808303816000875af1925050508015610743575060408051601f3d908101601f1916820190925261074091810190611a64565b60015b1561074a57505b505050565b610757610d25565b826001600160a01b03811661077e5760405162461bcd60e51b81526004016102ca90611a02565b6001600160a01b038085166000908152609860205260409020548591166107e15760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b60448201526064016102ca565b6001600160a01b0384161580156108095750600083600281111561080757610807611a31565b145b156108645760405162461bcd60e51b815260206004820152602560248201527f63616e277420736574207a65726f206164647265737320746f206d61696e206f6044820152647261636c6560d81b60648201526084016102ca565b6001600160a01b0385166000908152609860205260409020849060010184600281111561089357610893611a31565b600381106108a3576108a36119c5565b0180546001600160a01b0319166001600160a01b03929092169190911790558260028111156108d4576108d4611a31565b846001600160a01b0316866001600160a01b03167fea681d3efb830ef032a9c29a7215b5ceeeb546250d2c463dbf87817aecda1bf160405160405180910390a45050505050565b600054610100900460ff161580801561093b5750600054600160ff909116105b806109555750303b158015610955575060005460ff166001145b6109b85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102ca565b6000805460ff1916600117905580156109db576000805461ff0019166101001790555b6001600160a01b038216610a315760405162461bcd60e51b815260206004820181905260248201527f696e76616c69756420626f756e642076616c696461746f72206164647265737360448201526064016102ca565b609780546001600160a01b0319166001600160a01b038416179055610a54610e60565b610a5c610e8f565b8015610313576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b610aad611596565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190611a47565b6001600160a01b03818116600090815260986020908152604091829020825160608082018552825490951681528351948501938490529495509290840191600184019060039082845b81546001600160a01b03168152600190910190602001808311610b5a575050509183525050604080516060810191829052602090920191906004840190600390826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610b9f579050505050505081525050915050919050565b610be8610d25565b6001600160a01b038116610c4d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ca565b610c5681610dd1565b50565b6000610c6760655460ff1690565b15610cb45760405162461bcd60e51b815260206004820152601a60248201527f726573696c69656e74206f7261636c652069732070617573656400000000000060448201526064016102ca565b6000610cbf83610ebe565b905080610cd257610ccf83611093565b90505b80610d1f5760405162461bcd60e51b815260206004820152601e60248201527f696e76616c696420726573696c69656e74206f7261636c65207072696365000060448201526064016102ca565b92915050565b6033546001600160a01b031633146104435760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ca565b610d876113bf565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610e2b611408565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610db43390565b600054610100900460ff16610e875760405162461bcd60e51b81526004016102ca90611a7d565b61044361144e565b600054610100900460ff16610eb65760405162461bcd60e51b81526004016102ca90611a7d565b61044361147e565b6000808080610ecd85826105a7565b91509150808015610ee657506001600160a01b03821615155b1561108a5760405163fc57d4df60e01b81526001600160a01b03868116600483015283169063fc57d4df90602401602060405180830381865afa925050508015610f4d575060408051601f3d908101601f19168201909252610f4a91810190611a64565b60015b1561108a57809350600080610f638860016105a7565b91509150808015610f7c57506001600160a01b03821615155b156110865760405163fc57d4df60e01b81526001600160a01b03898116600483015283169063fc57d4df90602401602060405180830381865afa925050508015610fe3575060408051601f3d908101601f19168201909252610fe091810190611a64565b60015b1561108657801561108457609754604051634be3819f60e11b81526001600160a01b038b81166004830152602482018a90526044820184905260009216906397c7033e90606401602060405180830381865afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b9190611ac8565b905080611082575060009998505050505050505050565b505b505b5050505b50909392505050565b6000808080806110a48660026105a7565b915091508080156110bd57506001600160a01b03821615155b156112705760405163fc57d4df60e01b81526001600160a01b03878116600483015283169063fc57d4df90602401602060405180830381865afa925050508015611124575060408051601f3d908101601f1916820190925261112191810190611a64565b60015b156112705780945060008061113a8960016105a7565b9150915080801561115357506001600160a01b03821615155b156112675760405163fc57d4df60e01b81526001600160a01b038a8116600483015283169063fc57d4df90602401602060405180830381865afa9250505080156111ba575060408051601f3d908101601f191682019092526111b791810190611a64565b60015b6111c7576001955061126c565b801561125c57609754604051634be3819f60e11b81526001600160a01b038c81166004830152602482018b90526044820184905260009216906397c7033e90606401602060405180830381865afa158015611226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124a9190611ac8565b90508061125657600197505b50611261565b600196505b5061126c565b600195505b5050505b82156113b5576000806112848860006105a7565b9150915080801561129d57506001600160a01b03821615155b156113ad5760405163fc57d4df60e01b81526001600160a01b03898116600483015283169063fc57d4df90602401602060405180830381865afa925050508015611304575060408051601f3d908101601f1916820190925261130191810190611a64565b60015b61131157600095506113b2565b609754604051634be3819f60e11b81526001600160a01b038b81166004830152602482018a90526044820184905260009216906397c7033e90606401602060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190611ac8565b9050806113a5575060009998505050505050505050565b5095506113b2565b600095505b50505b5091949350505050565b60655460ff166104435760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102ca565b60655460ff16156104435760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102ca565b600054610100900460ff166114755760405162461bcd60e51b81526004016102ca90611a7d565b61044333610dd1565b600054610100900460ff166114a55760405162461bcd60e51b81526004016102ca90611a7d565b6065805460ff19169055565b82600381019282156114f9579160200282015b828111156114f957825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906114c4565b506115059291506115cb565b5090565b6001830191839082156114f95791602002820160005b8382111561155c57835183826101000a81548160ff021916908315150217905550926020019260010160208160000104928301926001030261151f565b80156115895782816101000a81549060ff021916905560010160208160000104928301926001030261155c565b50506115059291506115cb565b604051806060016040528060006001600160a01b031681526020016115b96115e0565b81526020016115c66115e0565b905290565b5b8082111561150557600081556001016115cc565b60405180606001604052806003906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611637576116376115fe565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611666576116666115fe565b604052919050565b6001600160a01b0381168114610c5657600080fd5b8015158114610c5657600080fd5b600082601f8301126116a257600080fd5b6116aa611614565b8060608401858111156116bc57600080fd5b845b818110156116df5780356116d181611683565b8452602093840193016116be565b509095945050505050565b600060e082840312156116fc57600080fd5b611704611614565b905081356117118161166e565b81526020603f8301841361172457600080fd5b61172c611614565b80608085018681111561173e57600080fd5b8386015b818110156117625780356117558161166e565b8452928401928401611742565b5081848601526117728782611691565b60408601525050505092915050565b6000602080838503121561179457600080fd5b823567ffffffffffffffff808211156117ac57600080fd5b818501915085601f8301126117c057600080fd5b8135818111156117d2576117d26115fe565b6117e0848260051b0161163d565b818152848101925060e09182028401850191888311156117ff57600080fd5b938501935b828510156118255761181689866116ea565b84529384019392850192611804565b50979650505050505050565b600060e0828403121561184357600080fd5b61184d83836116ea565b9392505050565b80356003811061186357600080fd5b919050565b60008060006060848603121561187d57600080fd5b83356118888161166e565b925061189660208501611854565b915060408401356118a681611683565b809150509250925092565b600080604083850312156118c457600080fd5b82356118cf8161166e565b91506118dd60208401611854565b90509250929050565b6000602082840312156118f857600080fd5b813561184d8161166e565b60008060006060848603121561191857600080fd5b83356119238161166e565b925060208401356119338161166e565b915061194160408501611854565b90509250925092565b81516001600160a01b03908116825260208084015160e0840192919081850160005b600381101561198b57825185168252918301919083019060010161196c565b505050604085015191506080840160005b60038110156119bb57835115158252928201929082019060010161199c565b5050505092915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016119fb57634e487b7160e01b600052601160045260246000fd5b5060010190565b60208082526015908201527463616e2774206265207a65726f206164647265737360581b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611a5957600080fd5b815161184d8161166e565b600060208284031215611a7657600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611ada57600080fd5b815161184d8161168356fea26469706673582212209c56dd5b95fc404eddbfeb4591a30ffbb60b5ae4b6fb8a59e212e1f29442202164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80638456cb59116100a2578063a6b1344a11610071578063a6b1344a14610215578063c4d66de814610228578063cb67e3b11461023b578063f2fde38b1461025b578063fc57d4df1461026e57600080fd5b80638456cb59146101b75780638b855da4146101bf5780638da5cb5b146101f157806396e85ced1461020257600080fd5b80634b932b8f116100de5780634b932b8f146101705780634bf39cba146101835780635c975abb14610199578063715018a6146101af57600080fd5b80632cfa387114610110578063333a21b01461012557806333d33494146101385780633f4ba83a14610168575b600080fd5b61012361011e366004611781565b610281565b005b610123610133366004611831565b610317565b60975461014b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610123610433565b61012361017e366004611868565b610445565b61018b600081565b60405190815260200161015f565b60655460ff16604051901515815260200161015f565b610123610585565b610123610597565b6101d26101cd3660046118b1565b6105a7565b604080516001600160a01b03909316835290151560208301520161015f565b6033546001600160a01b031661014b565b6101236102103660046118e6565b6106b2565b610123610223366004611903565b61074f565b6101236102363660046118e6565b61091b565b61024e6102493660046118e6565b610aa5565b60405161015f919061194a565b6101236102693660046118e6565b610be0565b61018b61027c3660046118e6565b610c59565b610289610d25565b80516000036102d35760405162461bcd60e51b815260206004820152601160248201527006c656e6774682063616e2774206265203607c1b60448201526064015b60405180910390fd5b60005b8151811015610313576103018282815181106102f4576102f46119c5565b6020026020010151610317565b8061030b816119db565b9150506102d6565b5050565b61031f610d25565b80516001600160a01b0381166103475760405162461bcd60e51b81526004016102ca90611a02565b6020820151516001600160a01b0381166103735760405162461bcd60e51b81526004016102ca90611a02565b82516001600160a01b039081166000908152609860209081526040909120855181546001600160a01b03191693169290921782558401518491906103bd90600183019060036114b1565b5060408201516103d39060048301906003611509565b505050602083810151808201518151865160409384015193516001600160a01b039485168152928416949184169316917fa51ad01e2270c314a7b78f0c60fe66c723f2d06c121d63fcdce776e654878fc1910160405180910390a4505050565b61043b610d25565b610443610d7f565b565b61044d610d25565b826001600160a01b0381166104745760405162461bcd60e51b81526004016102ca90611a02565b6001600160a01b038085166000908152609860205260409020548591166104d75760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b60448201526064016102ca565b6001600160a01b0385166000908152609860205260409020839060040185600281111561050657610506611a31565b60038110610516576105166119c5565b602091828204019190066101000a81548160ff02191690831515021790555082151584600281111561054a5761054a611a31565b6040516001600160a01b038816907fcf3cad1ec87208efbde5d82a0557484a78d4182c3ad16926a5463bc1f7234b3d90600090a45050505050565b61058d610d25565b6104436000610dd1565b61059f610d25565b610443610e23565b6000806000846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e9190611a47565b6001600160a01b038116600090815260986020526040902090915060010184600281111561063e5761063e611a31565b6003811061064e5761064e6119c5565b01546001600160a01b0382811660009081526098602052604090209116935060040184600281111561068257610682611a31565b60038110610692576106926119c5565b602091828204019190069054906101000a900460ff169150509250929050565b6000806106c08360016105a7565b90925090506001600160a01b038216158015906106da5750805b1561074a5760405163725068a560e01b81526001600160a01b03848116600483015283169063725068a5906024016020604051808303816000875af1925050508015610743575060408051601f3d908101601f1916820190925261074091810190611a64565b60015b1561074a57505b505050565b610757610d25565b826001600160a01b03811661077e5760405162461bcd60e51b81526004016102ca90611a02565b6001600160a01b038085166000908152609860205260409020548591166107e15760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b60448201526064016102ca565b6001600160a01b0384161580156108095750600083600281111561080757610807611a31565b145b156108645760405162461bcd60e51b815260206004820152602560248201527f63616e277420736574207a65726f206164647265737320746f206d61696e206f6044820152647261636c6560d81b60648201526084016102ca565b6001600160a01b0385166000908152609860205260409020849060010184600281111561089357610893611a31565b600381106108a3576108a36119c5565b0180546001600160a01b0319166001600160a01b03929092169190911790558260028111156108d4576108d4611a31565b846001600160a01b0316866001600160a01b03167fea681d3efb830ef032a9c29a7215b5ceeeb546250d2c463dbf87817aecda1bf160405160405180910390a45050505050565b600054610100900460ff161580801561093b5750600054600160ff909116105b806109555750303b158015610955575060005460ff166001145b6109b85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102ca565b6000805460ff1916600117905580156109db576000805461ff0019166101001790555b6001600160a01b038216610a315760405162461bcd60e51b815260206004820181905260248201527f696e76616c69756420626f756e642076616c696461746f72206164647265737360448201526064016102ca565b609780546001600160a01b0319166001600160a01b038416179055610a54610e60565b610a5c610e8f565b8015610313576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b610aad611596565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190611a47565b6001600160a01b03818116600090815260986020908152604091829020825160608082018552825490951681528351948501938490529495509290840191600184019060039082845b81546001600160a01b03168152600190910190602001808311610b5a575050509183525050604080516060810191829052602090920191906004840190600390826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610b9f579050505050505081525050915050919050565b610be8610d25565b6001600160a01b038116610c4d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ca565b610c5681610dd1565b50565b6000610c6760655460ff1690565b15610cb45760405162461bcd60e51b815260206004820152601a60248201527f726573696c69656e74206f7261636c652069732070617573656400000000000060448201526064016102ca565b6000610cbf83610ebe565b905080610cd257610ccf83611093565b90505b80610d1f5760405162461bcd60e51b815260206004820152601e60248201527f696e76616c696420726573696c69656e74206f7261636c65207072696365000060448201526064016102ca565b92915050565b6033546001600160a01b031633146104435760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ca565b610d876113bf565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610e2b611408565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610db43390565b600054610100900460ff16610e875760405162461bcd60e51b81526004016102ca90611a7d565b61044361144e565b600054610100900460ff16610eb65760405162461bcd60e51b81526004016102ca90611a7d565b61044361147e565b6000808080610ecd85826105a7565b91509150808015610ee657506001600160a01b03821615155b1561108a5760405163fc57d4df60e01b81526001600160a01b03868116600483015283169063fc57d4df90602401602060405180830381865afa925050508015610f4d575060408051601f3d908101601f19168201909252610f4a91810190611a64565b60015b1561108a57809350600080610f638860016105a7565b91509150808015610f7c57506001600160a01b03821615155b156110865760405163fc57d4df60e01b81526001600160a01b03898116600483015283169063fc57d4df90602401602060405180830381865afa925050508015610fe3575060408051601f3d908101601f19168201909252610fe091810190611a64565b60015b1561108657801561108457609754604051634be3819f60e11b81526001600160a01b038b81166004830152602482018a90526044820184905260009216906397c7033e90606401602060405180830381865afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b9190611ac8565b905080611082575060009998505050505050505050565b505b505b5050505b50909392505050565b6000808080806110a48660026105a7565b915091508080156110bd57506001600160a01b03821615155b156112705760405163fc57d4df60e01b81526001600160a01b03878116600483015283169063fc57d4df90602401602060405180830381865afa925050508015611124575060408051601f3d908101601f1916820190925261112191810190611a64565b60015b156112705780945060008061113a8960016105a7565b9150915080801561115357506001600160a01b03821615155b156112675760405163fc57d4df60e01b81526001600160a01b038a8116600483015283169063fc57d4df90602401602060405180830381865afa9250505080156111ba575060408051601f3d908101601f191682019092526111b791810190611a64565b60015b6111c7576001955061126c565b801561125c57609754604051634be3819f60e11b81526001600160a01b038c81166004830152602482018b90526044820184905260009216906397c7033e90606401602060405180830381865afa158015611226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124a9190611ac8565b90508061125657600197505b50611261565b600196505b5061126c565b600195505b5050505b82156113b5576000806112848860006105a7565b9150915080801561129d57506001600160a01b03821615155b156113ad5760405163fc57d4df60e01b81526001600160a01b03898116600483015283169063fc57d4df90602401602060405180830381865afa925050508015611304575060408051601f3d908101601f1916820190925261130191810190611a64565b60015b61131157600095506113b2565b609754604051634be3819f60e11b81526001600160a01b038b81166004830152602482018a90526044820184905260009216906397c7033e90606401602060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190611ac8565b9050806113a5575060009998505050505050505050565b5095506113b2565b600095505b50505b5091949350505050565b60655460ff166104435760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102ca565b60655460ff16156104435760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102ca565b600054610100900460ff166114755760405162461bcd60e51b81526004016102ca90611a7d565b61044333610dd1565b600054610100900460ff166114a55760405162461bcd60e51b81526004016102ca90611a7d565b6065805460ff19169055565b82600381019282156114f9579160200282015b828111156114f957825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906114c4565b506115059291506115cb565b5090565b6001830191839082156114f95791602002820160005b8382111561155c57835183826101000a81548160ff021916908315150217905550926020019260010160208160000104928301926001030261151f565b80156115895782816101000a81549060ff021916905560010160208160000104928301926001030261155c565b50506115059291506115cb565b604051806060016040528060006001600160a01b031681526020016115b96115e0565b81526020016115c66115e0565b905290565b5b8082111561150557600081556001016115cc565b60405180606001604052806003906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611637576116376115fe565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611666576116666115fe565b604052919050565b6001600160a01b0381168114610c5657600080fd5b8015158114610c5657600080fd5b600082601f8301126116a257600080fd5b6116aa611614565b8060608401858111156116bc57600080fd5b845b818110156116df5780356116d181611683565b8452602093840193016116be565b509095945050505050565b600060e082840312156116fc57600080fd5b611704611614565b905081356117118161166e565b81526020603f8301841361172457600080fd5b61172c611614565b80608085018681111561173e57600080fd5b8386015b818110156117625780356117558161166e565b8452928401928401611742565b5081848601526117728782611691565b60408601525050505092915050565b6000602080838503121561179457600080fd5b823567ffffffffffffffff808211156117ac57600080fd5b818501915085601f8301126117c057600080fd5b8135818111156117d2576117d26115fe565b6117e0848260051b0161163d565b818152848101925060e09182028401850191888311156117ff57600080fd5b938501935b828510156118255761181689866116ea565b84529384019392850192611804565b50979650505050505050565b600060e0828403121561184357600080fd5b61184d83836116ea565b9392505050565b80356003811061186357600080fd5b919050565b60008060006060848603121561187d57600080fd5b83356118888161166e565b925061189660208501611854565b915060408401356118a681611683565b809150509250925092565b600080604083850312156118c457600080fd5b82356118cf8161166e565b91506118dd60208401611854565b90509250929050565b6000602082840312156118f857600080fd5b813561184d8161166e565b60008060006060848603121561191857600080fd5b83356119238161166e565b925060208401356119338161166e565b915061194160408501611854565b90509250925092565b81516001600160a01b03908116825260208084015160e0840192919081850160005b600381101561198b57825185168252918301919083019060010161196c565b505050604085015191506080840160005b60038110156119bb57835115158252928201929082019060010161199c565b5050505092915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016119fb57634e487b7160e01b600052601160045260246000fd5b5060010190565b60208082526015908201527463616e2774206265207a65726f206164647265737360581b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611a5957600080fd5b815161184d8161166e565b600060208284031215611a7657600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611ada57600080fd5b815161184d8161168356fea26469706673582212209c56dd5b95fc404eddbfeb4591a30ffbb60b5ae4b6fb8a59e212e1f29442202164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "enableOracle(address,uint8,bool)": {
        "params": {
          "asset": "asset address",
          "enable": "expected status",
          "role": "oracle role"
        }
      },
      "getOracle(address,uint8)": {
        "params": {
          "role": "oracle role",
          "vToken": "vtoken address"
        }
      },
      "getTokenConfig(address)": {
        "details": "Get token config by vToken address",
        "params": {
          "vToken": "vtoken address"
        }
      },
      "getUnderlyingPrice(address)": {
        "params": {
          "vToken": "vToken address"
        },
        "returns": {
          "_0": "price USD price in 18 decimals"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOracle(address,address,uint8)": {
        "params": {
          "asset": "asset address",
          "oracle": "oracle address",
          "role": "oracle role"
        }
      },
      "setTokenConfig((address,address[3],bool[3]))": {
        "params": {
          "tokenConfig": "token config struct"
        }
      },
      "setTokenConfigs((address,address[3],bool[3])[])": {
        "params": {
          "tokenConfigs_": "token config array"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePrice(address)": {
        "params": {
          "vToken": "vToken address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "enableOracle(address,uint8,bool)": {
        "notice": "Enable/disable oracle for the input vToken, input vToken MUST exist"
      },
      "getOracle(address,uint8)": {
        "notice": "Get oracle & enabling status by vToken address"
      },
      "getUnderlyingPrice(address)": {
        "notice": "Get price of underlying asset of the input vToken, check flow: - check the global pausing status - check price from main oracle against pivot oracle - check price from fallback oracle against pivot oracle or main oracle if fails"
      },
      "pause()": {
        "notice": "Pause protocol"
      },
      "setOracle(address,address,uint8)": {
        "notice": "Set oracle of any type for the input vToken, input vToken MUST exist"
      },
      "setTokenConfig((address,address[3],bool[3]))": {
        "notice": "Set single token configs, vToken MUST HAVE NOT be added before, and main oracle MUST NOT be zero address"
      },
      "setTokenConfigs((address,address[3],bool[3])[])": {
        "notice": "Batch set token configs"
      },
      "unpause()": {
        "notice": "Unpause protocol"
      },
      "updatePrice(address)": {
        "notice": "Currently it calls the updateTwap"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3462,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "boundValidator",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(BoundValidatorInterface)4517"
      },
      {
        "astId": 3485,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "tokenConfigs",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_struct(TokenConfig)3480_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)3_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_bool)3_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BoundValidatorInterface)4517": {
        "encoding": "inplace",
        "label": "contract BoundValidatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(TokenConfig)3480_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ResilientOracle.TokenConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenConfig)3480_storage"
      },
      "t_struct(TokenConfig)3480_storage": {
        "encoding": "inplace",
        "label": "struct ResilientOracle.TokenConfig",
        "members": [
          {
            "astId": 3469,
            "contract": "contracts/ResilientOracle.sol:ResilientOracle",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3474,
            "contract": "contracts/ResilientOracle.sol:ResilientOracle",
            "label": "oracles",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)3_storage"
          },
          {
            "astId": 3479,
            "contract": "contracts/ResilientOracle.sol:ResilientOracle",
            "label": "enableFlagsForOracles",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bool)3_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
