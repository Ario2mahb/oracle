{
  "address": "0xa7a79bb64A9fE3865Fd6EFB43B953f928054d36f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousPriceMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestedPriceMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPriceMantissa",
          "type": "uint256"
        }
      ],
      "name": "PricePosted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxStalePeriod",
          "type": "uint256"
        }
      ],
      "name": "TokenConfigAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VAI_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setDirectPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feed",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxStalePeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenConfig",
          "name": "tokenConfig",
          "type": "tuple"
        }
      ],
      "name": "setTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feed",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxStalePeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenConfig[]",
          "name": "tokenConfigs_",
          "type": "tuple[]"
        }
      ],
      "name": "setTokenConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VBep20Interface",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingPriceMantissa",
          "type": "uint256"
        }
      ],
      "name": "setUnderlyingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenConfigs",
      "outputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxStalePeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x370ebf83dc5bde427e74764e30461463a3b6d388f7f9a0dee706d06ecb1ea836",
  "receipt": {
    "to": null,
    "from": "0x33ca84a254470896625DC7E07aB0c76bbAde0063",
    "contractAddress": "0xa7a79bb64A9fE3865Fd6EFB43B953f928054d36f",
    "transactionIndex": 22,
    "gasUsed": "1141291",
    "logsBloom": "0x
    "blockHash": "0x7dd16fbfb61bace5d0468f14038e89c901cce5e0681f82f520ac7aa3e4ff6c23",
    "transactionHash": "0x370ebf83dc5bde427e74764e30461463a3b6d388f7f9a0dee706d06ecb1ea836",
    "logs": [],
    "blockNumber": 7524333,
    "cumulativeGasUsed": "3774312",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4214eb9539b4715ec04133db70da14b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPriceMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedPriceMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceMantissa\",\"type\":\"uint256\"}],\"name\":\"PricePosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxStalePeriod\",\"type\":\"uint256\"}],\"name\":\"TokenConfigAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VAI_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setDirectPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxStalePeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxStalePeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfigs_\",\"type\":\"tuple[]\"}],\"name\":\"setTokenConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VBep20Interface\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPriceMantissa\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenConfigs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxStalePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getUnderlyingPrice(address)\":{\"params\":{\"vToken\":\"vToken address\"},\"returns\":{\"_0\":\"price in USD, with 18 decimals\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDirectPrice(address,uint256)\":{\"params\":{\"asset\":\"asset address\",\"price\":\"price in 18 decimals\"}},\"setTokenConfig((address,address,uint256))\":{\"params\":{\"tokenConfig\":\"token config struct\"}},\"setTokenConfigs((address,address,uint256)[])\":{\"params\":{\"tokenConfigs_\":\"config array\"}},\"setUnderlyingPrice(address,uint256)\":{\"params\":{\"underlyingPriceMantissa\":\"price in 18 decimals\",\"vToken\":\"vToken address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"PricePosted(address,uint256,uint256,uint256)\":{\"notice\":\"emit when forced price is set \"},\"TokenConfigAdded(address,address,uint256)\":{\"notice\":\"emit when token config is added\"}},\"kind\":\"user\",\"methods\":{\"VAI_VALUE()\":{\"notice\":\"VAI token is considered $1 constantly in oracle for now\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the Chainlink price of underlying asset of input vToken, revert when vToken is zero address\"},\"prices(address)\":{\"notice\":\"TODO: might be removed some day, it's for enabling us to force set the prices to certain values in some urgent conditions\"},\"setDirectPrice(address,uint256)\":{\"notice\":\"Set the forced prices of the input token\"},\"setTokenConfig((address,address,uint256))\":{\"notice\":\"Add single token config, vToken & feed cannot be zero address, and maxStalePeriod must be positive\"},\"setTokenConfigs((address,address,uint256)[])\":{\"notice\":\"Add multiple token configs at the same time\"},\"setUnderlyingPrice(address,uint256)\":{\"notice\":\"Set the forced prices of the underlying token of input vToken\"},\"tokenConfigs(address)\":{\"notice\":\"token config by assets\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/ChainlinkOracle.sol\":\"ChainlinkOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title The V2 & V3 Aggregator Interface\\n * @notice Solidity V0.5 does not allow interfaces to inherit from other\\n * interfaces so this contract is a combination of v0.5 AggregatorInterface.sol\\n * and v0.5 AggregatorV3Interface.sol.\\n */\\ninterface AggregatorV2V3Interface {\\n    //\\n    // V2 Interface:\\n    //\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n\\n    //\\n    // V3 Interface:\\n    //\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x3f2c0cc4d6b0ec4b219ef62ce6426ed7fe00052962fab83670792217a34f2166\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/BEP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface BEP20Interface {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x53aa6d0be81f26e962567f29e9a17f1b73205997c38c6c298e243ef923554c34\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface OracleInterface {\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface PivotValidator {\\n    function validatePrice(address vToken, uint256 price) external view returns (bool);\\n}\\n\\ninterface PivotOracleInterface is OracleInterface, PivotValidator {\\n}\\n\",\"keccak256\":\"0xfa98a01be22e05cb4b68bd33c03025b9fbe0101ca502cd2f1164ed88b614d24a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/VBep20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BEP20Interface.sol\\\";\\n\\ninterface VBep20Interface is BEP20Interface {\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    function underlying() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf65bba1e926855bbe2796e061755df640fbae160c0fcbcd996087a24d8049a81\",\"license\":\"UNLICENSED\"},\"contracts/oracles/ChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/VBep20Interface.sol\\\";\\nimport \\\"../interfaces/AggregatorV2V3Interface.sol\\\";\\nimport \\\"../interfaces/OracleInterface.sol\\\";\\n\\nstruct TokenConfig {\\n    /// @notice vToken address, which can't be zero address and can be used for existance check\\n    address vToken;\\n    /// @notice chainlink feed address\\n    address feed;\\n    /// @notice expiration period of this asset\\n    uint256 maxStalePeriod;\\n}\\n\\ncontract ChainlinkOracle is OwnableUpgradeable, OracleInterface {\\n    using SafeMath for uint256;\\n\\n    /// @notice VAI token is considered $1 constantly in oracle for now\\n    uint256 public constant VAI_VALUE = 1e18;\\n\\n    /// @notice TODO: might be removed some day, it's for enabling us to force set the prices to\\n    /// certain values in some urgent conditions\\n    mapping(address => uint256) public prices;\\n\\n    /// @notice token config by assets\\n    mapping(address => TokenConfig) public tokenConfigs;\\n\\n    /// @notice emit when forced price is set \\n    event PricePosted(\\n        address asset,\\n        uint256 previousPriceMantissa,\\n        uint256 requestedPriceMantissa,\\n        uint256 newPriceMantissa\\n    );\\n\\n    /// @notice emit when token config is added\\n    event TokenConfigAdded(address vToken, address feed, uint256 maxStalePeriod);\\n\\n    modifier notNullAddress(address someone) {\\n        require(someone != address(0), \\\"can't be zero address\\\");\\n        _;\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n    }\\n\\n    /**\\n     * @notice Get the Chainlink price of underlying asset of input vToken, revert when vToken is zero address\\n     * @param vToken vToken address\\n     * @return price in USD, with 18 decimals\\n     */\\n    function getUnderlyingPrice(address vToken) public view override\\n        returns (uint256)\\n    {\\n        string memory symbol = VBep20Interface(vToken).symbol();\\n        // VBNB token doesn't have `underlying` method, so it has to skip `getUnderlyingPriceInternal\\n        // method and directly goes into `getChainlinkPrice`\\n        if (compareStrings(symbol, \\\"vBNB\\\")) {\\n            return getChainlinkPrice(vToken);\\n        // VAI price is constantly 1 at the moment, but not guarantee in the future\\n        } else if (compareStrings(symbol, \\\"VAI\\\")) {\\n            return VAI_VALUE;\\n        // @TODO: This is some history code, keep it here in case of messing up \\n        } else if (compareStrings(symbol, \\\"XVS\\\")) {\\n            return prices[address(vToken)];\\n        } else {\\n            return getUnderlyingPriceInternal(VBep20Interface(vToken));\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the Chainlink price of underlying asset of input vToken or cached price when it's been set\\n     * @dev The decimals of underlying tokens is considered to ensure the returned prices are in 18 decimals\\n     * @param vToken vToken address\\n     * @return price in USD, with 18 decimals\\n     */\\n    function getUnderlyingPriceInternal(VBep20Interface vToken) internal view returns (uint256 price) {\\n        VBep20Interface token = VBep20Interface(vToken.underlying());\\n\\n        if (prices[address(token)] != 0) {\\n            price = prices[address(token)];\\n        } else {\\n            price = getChainlinkPrice(address(vToken));\\n        }\\n\\n        uint256 decimalDelta = uint256(18).sub(uint256(token.decimals()));\\n        return price.mul(10**decimalDelta);\\n    }\\n\\n    /**\\n     * @notice Get the Chainlink price of underlying asset of input vToken, revert if token config doesn't exit\\n     * @dev The decimals of feeds are considered\\n     * @param vToken vToken address\\n     * @return price in USD, with 18 decimals\\n     */\\n    function getChainlinkPrice(address vToken)\\n        internal view\\n        notNullAddress(tokenConfigs[address(vToken)].vToken)\\n        returns (uint256)\\n    {\\n        TokenConfig storage tokenConfig = tokenConfigs[vToken];\\n        AggregatorV2V3Interface feed = AggregatorV2V3Interface(tokenConfig.feed);\\n\\n        // note: maxStalePeriod cannot be 0\\n        uint256 maxStalePeriod = tokenConfig.maxStalePeriod;\\n\\n        // Chainlink USD-denominated feeds store answers at 8 decimals, mostly\\n        uint256 decimalDelta = uint256(18).sub(feed.decimals());\\n\\n        (, int256 answer, , uint256 updatedAt, ) = feed.latestRoundData();\\n        require(answer > 0, \\\"chainlink price must be positive\\\");\\n\\n        uint256 deltaTime = block.timestamp.sub(updatedAt, \\\"updatedAt exceeds block time\\\");\\n        require(deltaTime <= maxStalePeriod, \\\"chainlink price expired\\\");\\n\\n        return uint256(answer).mul(10**decimalDelta);\\n    }\\n\\n    /**\\n     * @notice Set the forced prices of the underlying token of input vToken\\n     * @param vToken vToken address\\n     * @param underlyingPriceMantissa price in 18 decimals\\n     */\\n    function setUnderlyingPrice(VBep20Interface vToken, uint256 underlyingPriceMantissa) external onlyOwner() {\\n        address asset = address(vToken.underlying());\\n        emit PricePosted(asset, prices[asset], underlyingPriceMantissa, underlyingPriceMantissa);\\n        prices[asset] = underlyingPriceMantissa;\\n    }\\n\\n    /**\\n     * @notice Set the forced prices of the input token\\n     * @param asset asset address\\n     * @param price price in 18 decimals\\n     */\\n    function setDirectPrice(address asset, uint256 price) external onlyOwner() {\\n        emit PricePosted(asset, prices[asset], price, price);\\n        prices[asset] = price;\\n    }\\n\\n    /**\\n     * @notice Add multiple token configs at the same time\\n     * @param tokenConfigs_ config array\\n     */\\n    function setTokenConfigs(TokenConfig[] memory tokenConfigs_) external onlyOwner() {\\n        require(tokenConfigs_.length > 0, \\\"length can't be 0\\\");\\n        for (uint256 i = 0; i < tokenConfigs_.length; i++) {\\n            setTokenConfig(tokenConfigs_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add single token config, vToken & feed cannot be zero address, and maxStalePeriod must be positive\\n     * @param tokenConfig token config struct\\n     */\\n    function setTokenConfig(TokenConfig memory tokenConfig) public\\n        onlyOwner()\\n        notNullAddress(tokenConfig.vToken)\\n        notNullAddress(tokenConfig.feed)\\n    {\\n        require(tokenConfig.maxStalePeriod > 0, \\\"stale period can't be zero\\\");\\n        tokenConfigs[tokenConfig.vToken] = tokenConfig;\\n        emit TokenConfigAdded(\\n            tokenConfig.vToken, \\n            tokenConfig.feed,\\n            tokenConfig.maxStalePeriod\\n        );\\n    }\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0xbd8365fb152aeb2bc86465cada09453b08a96ed478d8ccad600dd7ae55628cc8\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506113b5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80638129fc1c11610081578063cfed246b1161005b578063cfed246b146101d6578063f2fde38b146101f6578063fc57d4df1461020957600080fd5b80638129fc1c146101965780638da5cb5b1461019e578063b9de61e2146101b957600080fd5b80631b69dc5f116100b25780631b69dc5f14610114578063392787d21461017b578063715018a61461018e57600080fd5b80630431710e146100d957806309a8acb0146100ee578063127ffda014610101575b600080fd5b6100ec6100e7366004610f66565b61021c565b005b6100ec6100fc366004611016565b6102be565b6100ec61010f366004611016565b610341565b610150610122366004611042565b6066602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b039485168152939092166020840152908201526060015b60405180910390f35b6100ec61018936600461105f565b61042a565b6100ec6105df565b6100ec6105f3565b6033546040516001600160a01b039091168152602001610172565b6101c8670de0b6b3a764000081565b604051908152602001610172565b6101c86101e4366004611042565b60656020526000908152604090205481565b6100ec610204366004611042565b610713565b6101c8610217366004611042565b6107a0565b6102246108d0565b600081511161027a5760405162461bcd60e51b815260206004820152601160248201527f6c656e6774682063616e2774206265203000000000000000000000000000000060448201526064015b60405180910390fd5b60005b81518110156102ba576102a882828151811061029b5761029b61107b565b602002602001015161042a565b806102b2816110a7565b91505061027d565b5050565b6102c66108d0565b6001600160a01b038216600081815260656020908152604091829020548251938452908301528101829052606081018290527fdd71a1d19fcba687442a1d5c58578f1e409af71a79d10fd95a4d66efd8fa9ae79060800160405180910390a16001600160a01b03909116600090815260656020526040902055565b6103496108d0565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ad91906110c0565b6001600160a01b038116600081815260656020908152604091829020548251938452908301528101849052606081018490529091507fdd71a1d19fcba687442a1d5c58578f1e409af71a79d10fd95a4d66efd8fa9ae79060800160405180910390a16001600160a01b031660009081526065602052604090205550565b6104326108d0565b80516001600160a01b03811661048a5760405162461bcd60e51b815260206004820152601560248201527f63616e2774206265207a65726f206164647265737300000000000000000000006044820152606401610271565b60208201516001600160a01b0381166104e55760405162461bcd60e51b815260206004820152601560248201527f63616e2774206265207a65726f206164647265737300000000000000000000006044820152606401610271565b60008360400151116105395760405162461bcd60e51b815260206004820152601a60248201527f7374616c6520706572696f642063616e2774206265207a65726f0000000000006044820152606401610271565b82516001600160a01b039081166000908152606660209081526040918290208651815490851673ffffffffffffffffffffffffffffffffffffffff1991821681178355838901516001840180549190971692168217909555838801516002909201829055835194855291840191909152908201527f3cc8d9cb9370a23a8b9ffa75efa24cecb65c4693980e58260841adc474983c5f9060600160405180910390a1505050565b6105e76108d0565b6105f1600061092a565b565b600054610100900460ff16158080156106135750600054600160ff909116105b8061062d5750303b15801561062d575060005460ff166001145b61069f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610271565b6000805460ff1916600117905580156106c2576000805461ff0019166101001790555b6106ca610989565b8015610710576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b61071b6108d0565b6001600160a01b0381166107975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610271565b6107108161092a565b600080826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610809919081019061110d565b905061083181604051806040016040528060048152602001633b21272160e11b8152506109fc565b156108465761083f83610a56565b9392505050565b61086b816040518060400160405280600381526020016256414960e81b8152506109fc565b156108805750670de0b6b3a764000092915050565b6108a5816040518060400160405280600381526020016258565360e81b8152506109fc565b156108c75750506001600160a01b031660009081526065602052604090205490565b61083f83610cd9565b6033546001600160a01b031633146105f15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610271565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166109f45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610271565b6105f1610de6565b600081604051602001610a0f91906111a1565b6040516020818303038152906040528051906020012083604051602001610a3691906111a1565b604051602081830303815290604052805190602001201490505b92915050565b6001600160a01b0380821660009081526066602052604081205490911680610ac05760405162461bcd60e51b815260206004820152601560248201527f63616e2774206265207a65726f206164647265737300000000000000000000006044820152606401610271565b6001600160a01b03808416600090815260666020908152604080832060018101546002820154835163313ce56760e01b815293519296919091169490939092610b5a92869263313ce56792600480820193918290030181865afa158015610b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4f91906111bd565b60129060ff16610e5a565b9050600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc191906111ff565b5093505092505060008213610c185760405162461bcd60e51b815260206004820181905260248201527f636861696e6c696e6b207072696365206d75737420626520706f7369746976656044820152606401610271565b6000610c64826040518060400160405280601c81526020017f757064617465644174206578636565647320626c6f636b2074696d650000000081525042610e669092919063ffffffff16565b905084811115610cb65760405162461bcd60e51b815260206004820152601760248201527f636861696e6c696e6b20707269636520657870697265640000000000000000006044820152606401610271565b610ccb610cc485600a611333565b8490610e92565b9a9950505050505050505050565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3e91906110c0565b6001600160a01b03811660009081526065602052604090205490915015610d7f576001600160a01b0381166000908152606560205260409020549150610d8b565b610d8883610a56565b91505b6000610dce826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b2b573d6000803e3d6000fd5b9050610dde610cc482600a611333565b949350505050565b600054610100900460ff16610e515760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610271565b6105f13361092a565b600061083f828461133f565b60008184841115610e8a5760405162461bcd60e51b81526004016102719190611356565b505050900390565b600061083f8284611389565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610edd57610edd610e9e565b604052919050565b6001600160a01b038116811461071057600080fd5b600060608284031215610f0c57600080fd5b6040516060810181811067ffffffffffffffff82111715610f2f57610f2f610e9e565b6040529050808235610f4081610ee5565b81526020830135610f5081610ee5565b6020820152604092830135920191909152919050565b60006020808385031215610f7957600080fd5b823567ffffffffffffffff80821115610f9157600080fd5b818501915085601f830112610fa557600080fd5b813581811115610fb757610fb7610e9e565b610fc5848260051b01610eb4565b81815284810192506060918202840185019188831115610fe457600080fd5b938501935b8285101561100a57610ffb8986610efa565b84529384019392850192610fe9565b50979650505050505050565b6000806040838503121561102957600080fd5b823561103481610ee5565b946020939093013593505050565b60006020828403121561105457600080fd5b813561083f81610ee5565b60006060828403121561107157600080fd5b61083f8383610efa565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110b9576110b9611091565b5060010190565b6000602082840312156110d257600080fd5b815161083f81610ee5565b60005b838110156110f85781810151838201526020016110e0565b83811115611107576000848401525b50505050565b60006020828403121561111f57600080fd5b815167ffffffffffffffff8082111561113757600080fd5b818401915084601f83011261114b57600080fd5b81518181111561115d5761115d610e9e565b611170601f8201601f1916602001610eb4565b915080825285602082850101111561118757600080fd5b6111988160208401602086016110dd565b50949350505050565b600082516111b38184602087016110dd565b9190910192915050565b6000602082840312156111cf57600080fd5b815160ff8116811461083f57600080fd5b805169ffffffffffffffffffff811681146111fa57600080fd5b919050565b600080600080600060a0868803121561121757600080fd5b611220866111e0565b9450602086015193506040860151925060608601519150611243608087016111e0565b90509295509295909350565b600181815b8085111561128a57816000190482111561127057611270611091565b8085161561127d57918102915b93841c9390800290611254565b509250929050565b6000826112a157506001610a50565b816112ae57506000610a50565b81600181146112c457600281146112ce576112ea565b6001915050610a50565b60ff8411156112df576112df611091565b50506001821b610a50565b5060208310610133831016604e8410600b841016171561130d575081810a610a50565b611317838361124f565b806000190482111561132b5761132b611091565b029392505050565b600061083f8383611292565b60008282101561135157611351611091565b500390565b60208152600082518060208401526113758160408501602087016110dd565b601f01601f19169190910160400192915050565b60008160001904831182151516156113a3576113a3611091565b50029056fea164736f6c634300080d000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c80638129fc1c11610081578063cfed246b1161005b578063cfed246b146101d6578063f2fde38b146101f6578063fc57d4df1461020957600080fd5b80638129fc1c146101965780638da5cb5b1461019e578063b9de61e2146101b957600080fd5b80631b69dc5f116100b25780631b69dc5f14610114578063392787d21461017b578063715018a61461018e57600080fd5b80630431710e146100d957806309a8acb0146100ee578063127ffda014610101575b600080fd5b6100ec6100e7366004610f66565b61021c565b005b6100ec6100fc366004611016565b6102be565b6100ec61010f366004611016565b610341565b610150610122366004611042565b6066602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b039485168152939092166020840152908201526060015b60405180910390f35b6100ec61018936600461105f565b61042a565b6100ec6105df565b6100ec6105f3565b6033546040516001600160a01b039091168152602001610172565b6101c8670de0b6b3a764000081565b604051908152602001610172565b6101c86101e4366004611042565b60656020526000908152604090205481565b6100ec610204366004611042565b610713565b6101c8610217366004611042565b6107a0565b6102246108d0565b600081511161027a5760405162461bcd60e51b815260206004820152601160248201527f6c656e6774682063616e2774206265203000000000000000000000000000000060448201526064015b60405180910390fd5b60005b81518110156102ba576102a882828151811061029b5761029b61107b565b602002602001015161042a565b806102b2816110a7565b91505061027d565b5050565b6102c66108d0565b6001600160a01b038216600081815260656020908152604091829020548251938452908301528101829052606081018290527fdd71a1d19fcba687442a1d5c58578f1e409af71a79d10fd95a4d66efd8fa9ae79060800160405180910390a16001600160a01b03909116600090815260656020526040902055565b6103496108d0565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ad91906110c0565b6001600160a01b038116600081815260656020908152604091829020548251938452908301528101849052606081018490529091507fdd71a1d19fcba687442a1d5c58578f1e409af71a79d10fd95a4d66efd8fa9ae79060800160405180910390a16001600160a01b031660009081526065602052604090205550565b6104326108d0565b80516001600160a01b03811661048a5760405162461bcd60e51b815260206004820152601560248201527f63616e2774206265207a65726f206164647265737300000000000000000000006044820152606401610271565b60208201516001600160a01b0381166104e55760405162461bcd60e51b815260206004820152601560248201527f63616e2774206265207a65726f206164647265737300000000000000000000006044820152606401610271565b60008360400151116105395760405162461bcd60e51b815260206004820152601a60248201527f7374616c6520706572696f642063616e2774206265207a65726f0000000000006044820152606401610271565b82516001600160a01b039081166000908152606660209081526040918290208651815490851673ffffffffffffffffffffffffffffffffffffffff1991821681178355838901516001840180549190971692168217909555838801516002909201829055835194855291840191909152908201527f3cc8d9cb9370a23a8b9ffa75efa24cecb65c4693980e58260841adc474983c5f9060600160405180910390a1505050565b6105e76108d0565b6105f1600061092a565b565b600054610100900460ff16158080156106135750600054600160ff909116105b8061062d5750303b15801561062d575060005460ff166001145b61069f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610271565b6000805460ff1916600117905580156106c2576000805461ff0019166101001790555b6106ca610989565b8015610710576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b61071b6108d0565b6001600160a01b0381166107975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610271565b6107108161092a565b600080826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610809919081019061110d565b905061083181604051806040016040528060048152602001633b21272160e11b8152506109fc565b156108465761083f83610a56565b9392505050565b61086b816040518060400160405280600381526020016256414960e81b8152506109fc565b156108805750670de0b6b3a764000092915050565b6108a5816040518060400160405280600381526020016258565360e81b8152506109fc565b156108c75750506001600160a01b031660009081526065602052604090205490565b61083f83610cd9565b6033546001600160a01b031633146105f15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610271565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166109f45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610271565b6105f1610de6565b600081604051602001610a0f91906111a1565b6040516020818303038152906040528051906020012083604051602001610a3691906111a1565b604051602081830303815290604052805190602001201490505b92915050565b6001600160a01b0380821660009081526066602052604081205490911680610ac05760405162461bcd60e51b815260206004820152601560248201527f63616e2774206265207a65726f206164647265737300000000000000000000006044820152606401610271565b6001600160a01b03808416600090815260666020908152604080832060018101546002820154835163313ce56760e01b815293519296919091169490939092610b5a92869263313ce56792600480820193918290030181865afa158015610b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4f91906111bd565b60129060ff16610e5a565b9050600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc191906111ff565b5093505092505060008213610c185760405162461bcd60e51b815260206004820181905260248201527f636861696e6c696e6b207072696365206d75737420626520706f7369746976656044820152606401610271565b6000610c64826040518060400160405280601c81526020017f757064617465644174206578636565647320626c6f636b2074696d650000000081525042610e669092919063ffffffff16565b905084811115610cb65760405162461bcd60e51b815260206004820152601760248201527f636861696e6c696e6b20707269636520657870697265640000000000000000006044820152606401610271565b610ccb610cc485600a611333565b8490610e92565b9a9950505050505050505050565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3e91906110c0565b6001600160a01b03811660009081526065602052604090205490915015610d7f576001600160a01b0381166000908152606560205260409020549150610d8b565b610d8883610a56565b91505b6000610dce826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b2b573d6000803e3d6000fd5b9050610dde610cc482600a611333565b949350505050565b600054610100900460ff16610e515760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610271565b6105f13361092a565b600061083f828461133f565b60008184841115610e8a5760405162461bcd60e51b81526004016102719190611356565b505050900390565b600061083f8284611389565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610edd57610edd610e9e565b604052919050565b6001600160a01b038116811461071057600080fd5b600060608284031215610f0c57600080fd5b6040516060810181811067ffffffffffffffff82111715610f2f57610f2f610e9e565b6040529050808235610f4081610ee5565b81526020830135610f5081610ee5565b6020820152604092830135920191909152919050565b60006020808385031215610f7957600080fd5b823567ffffffffffffffff80821115610f9157600080fd5b818501915085601f830112610fa557600080fd5b813581811115610fb757610fb7610e9e565b610fc5848260051b01610eb4565b81815284810192506060918202840185019188831115610fe457600080fd5b938501935b8285101561100a57610ffb8986610efa565b84529384019392850192610fe9565b50979650505050505050565b6000806040838503121561102957600080fd5b823561103481610ee5565b946020939093013593505050565b60006020828403121561105457600080fd5b813561083f81610ee5565b60006060828403121561107157600080fd5b61083f8383610efa565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110b9576110b9611091565b5060010190565b6000602082840312156110d257600080fd5b815161083f81610ee5565b60005b838110156110f85781810151838201526020016110e0565b83811115611107576000848401525b50505050565b60006020828403121561111f57600080fd5b815167ffffffffffffffff8082111561113757600080fd5b818401915084601f83011261114b57600080fd5b81518181111561115d5761115d610e9e565b611170601f8201601f1916602001610eb4565b915080825285602082850101111561118757600080fd5b6111988160208401602086016110dd565b50949350505050565b600082516111b38184602087016110dd565b9190910192915050565b6000602082840312156111cf57600080fd5b815160ff8116811461083f57600080fd5b805169ffffffffffffffffffff811681146111fa57600080fd5b919050565b600080600080600060a0868803121561121757600080fd5b611220866111e0565b9450602086015193506040860151925060608601519150611243608087016111e0565b90509295509295909350565b600181815b8085111561128a57816000190482111561127057611270611091565b8085161561127d57918102915b93841c9390800290611254565b509250929050565b6000826112a157506001610a50565b816112ae57506000610a50565b81600181146112c457600281146112ce576112ea565b6001915050610a50565b60ff8411156112df576112df611091565b50506001821b610a50565b5060208310610133831016604e8410600b841016171561130d575081810a610a50565b611317838361124f565b806000190482111561132b5761132b611091565b029392505050565b600061083f8383611292565b60008282101561135157611351611091565b500390565b60208152600082518060208401526113758160408501602087016110dd565b601f01601f19169190910160400192915050565b60008160001904831182151516156113a3576113a3611091565b50029056fea164736f6c634300080d000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getUnderlyingPrice(address)": {
        "params": {
          "vToken": "vToken address"
        },
        "returns": {
          "_0": "price in USD, with 18 decimals"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDirectPrice(address,uint256)": {
        "params": {
          "asset": "asset address",
          "price": "price in 18 decimals"
        }
      },
      "setTokenConfig((address,address,uint256))": {
        "params": {
          "tokenConfig": "token config struct"
        }
      },
      "setTokenConfigs((address,address,uint256)[])": {
        "params": {
          "tokenConfigs_": "config array"
        }
      },
      "setUnderlyingPrice(address,uint256)": {
        "params": {
          "underlyingPriceMantissa": "price in 18 decimals",
          "vToken": "vToken address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "PricePosted(address,uint256,uint256,uint256)": {
        "notice": "emit when forced price is set "
      },
      "TokenConfigAdded(address,address,uint256)": {
        "notice": "emit when token config is added"
      }
    },
    "kind": "user",
    "methods": {
      "VAI_VALUE()": {
        "notice": "VAI token is considered $1 constantly in oracle for now"
      },
      "getUnderlyingPrice(address)": {
        "notice": "Get the Chainlink price of underlying asset of input vToken, revert when vToken is zero address"
      },
      "prices(address)": {
        "notice": "TODO: might be removed some day, it's for enabling us to force set the prices to certain values in some urgent conditions"
      },
      "setDirectPrice(address,uint256)": {
        "notice": "Set the forced prices of the input token"
      },
      "setTokenConfig((address,address,uint256))": {
        "notice": "Add single token config, vToken & feed cannot be zero address, and maxStalePeriod must be positive"
      },
      "setTokenConfigs((address,address,uint256)[])": {
        "notice": "Add multiple token configs at the same time"
      },
      "setUnderlyingPrice(address,uint256)": {
        "notice": "Set the forced prices of the underlying token of input vToken"
      },
      "tokenConfigs(address)": {
        "notice": "token config by assets"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 693,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3350,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "prices",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3356,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "tokenConfigs",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_struct(TokenConfig)3334_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(TokenConfig)3334_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenConfig)3334_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TokenConfig)3334_storage": {
        "encoding": "inplace",
        "label": "struct TokenConfig",
        "members": [
          {
            "astId": 3327,
            "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
            "label": "vToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3330,
            "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
            "label": "feed",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3333,
            "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
            "label": "maxStalePeriod",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}