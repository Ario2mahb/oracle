{
  "address": "0x49D276A4c6c460f12FdF24aD98B0D0eE4D1cC2Ba",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTimestamp",
          "type": "uint256"
        }
      ],
      "name": "AnchorPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pancakePool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "anchorPeriod",
          "type": "uint256"
        }
      ],
      "name": "TokenConfigAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAcc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAcc",
          "type": "uint256"
        }
      ],
      "name": "TwapWindowUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "upperBound",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lowerBound",
          "type": "uint256"
        }
      ],
      "name": "ValidateConfigAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bnbBaseUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busdBaseUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "baseUnit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pancakePool",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBnbBased",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isReversedPool",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "anchorPeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "currentCumulativePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expScale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vBNB_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "newObservations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "acc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oldObservations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "acc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "baseUnit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pancakePool",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBnbBased",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isReversedPool",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "anchorPeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "baseUnit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pancakePool",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isBnbBased",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isReversedPool",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "anchorPeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenConfig[]",
          "name": "configs",
          "type": "tuple[]"
        }
      ],
      "name": "setTokenConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "upperBoundRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBoundRatio",
              "type": "uint256"
            }
          ],
          "internalType": "struct ValidateConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setValidateConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "upperBoundRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBoundRatio",
              "type": "uint256"
            }
          ],
          "internalType": "struct ValidateConfig[]",
          "name": "configs",
          "type": "tuple[]"
        }
      ],
      "name": "setValidateConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenConfigs",
      "outputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseUnit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pancakePool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBnbBased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isReversedPool",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "anchorPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "updateTwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validateConfigs",
      "outputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "upperBoundRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lowerBoundRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reporterPrice",
          "type": "uint256"
        }
      ],
      "name": "validatePrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x00c14e9aa64bff95560a8bd0cf74ca49c498f803e0a66ae7b4145c74388aad66",
  "receipt": {
    "to": null,
    "from": "0x33ca84a254470896625DC7E07aB0c76bbAde0063",
    "contractAddress": "0x49D276A4c6c460f12FdF24aD98B0D0eE4D1cC2Ba",
    "transactionIndex": 7,
    "gasUsed": "1640781",
    "logsBloom": "0x
    "blockHash": "0x6c46b7f3b8f804f216e45067f36cdde86ce442131834cc17b413f8b5b8626358",
    "transactionHash": "0x00c14e9aa64bff95560a8bd0cf74ca49c498f803e0a66ae7b4145c74388aad66",
    "logs": [],
    "blockNumber": 7529592,
    "cumulativeGasUsed": "2223522",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "db48de05a0138077f5da70327d0fc0a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pancakePool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"anchorPeriod\",\"type\":\"uint256\"}],\"name\":\"TokenConfigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAcc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAcc\",\"type\":\"uint256\"}],\"name\":\"TwapWindowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"}],\"name\":\"ValidateConfigAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bnbBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pancakePool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBnbBased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isReversedPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"currentCumulativePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vBNB_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pancakePool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBnbBased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isReversedPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pancakePool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBnbBased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isReversedPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"setTokenConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"upperBoundRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBoundRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct ValidateConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setValidateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"upperBoundRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBoundRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct ValidateConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"setValidateConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenConfigs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pancakePool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBnbBased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isReversedPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"updateTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validateConfigs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"upperBoundRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBoundRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterPrice\",\"type\":\"uint256\"}],\"name\":\"validatePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"currentCumulativePrice((address,uint256,address,bool,bool,uint256))\":{\"returns\":{\"_0\":\"cumulative price of target token regardless of pair order \"}},\"getUnderlyingPrice(address)\":{\"params\":{\"vToken\":\"vToken address\"},\"returns\":{\"_0\":\"price in USD, with 18 decimals\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTokenConfig((address,uint256,address,bool,bool,uint256))\":{\"params\":{\"config\":\"token config struct\"}},\"setTokenConfigs((address,uint256,address,bool,bool,uint256)[])\":{\"params\":{\"configs\":\"config array\"}},\"setValidateConfig((address,uint256,uint256))\":{\"params\":{\"config\":\"config struct\"}},\"setValidateConfigs((address,uint256,uint256)[])\":{\"params\":{\"configs\":\"config array \"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validatePrice(address,uint256)\":{\"params\":{\"reporterPrice\":\"the price to be tested\",\"vToken\":\"vToken address\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AnchorPriceUpdated(address,uint256,uint256,uint256)\":{\"notice\":\"Emit this event when TWAP price is updated\"},\"TokenConfigAdded(address,address,uint256)\":{\"notice\":\"Emit this event when new token configs are added\"},\"TwapWindowUpdated(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emit this event when TWAP window is updated\"},\"ValidateConfigAdded(address,uint256,uint256)\":{\"notice\":\"Emit this event when new validate configs are added\"}},\"kind\":\"user\",\"methods\":{\"bnbBaseUnit()\":{\"notice\":\"the base unit of WBNB and BUSD, which are the paired tokens for all assets\"},\"currentCumulativePrice((address,uint256,address,bool,bool,uint256))\":{\"notice\":\"Fetches the current token/WBNB and token/BUSD price accumulator from pancakeswap.\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying TWAP price of input vToken\"},\"newObservations(address)\":{\"notice\":\"The current price observation of TWAP. With old and current observations we can calculate the TWAP between this range\"},\"oldObservations(address)\":{\"notice\":\"The old price observation of TWAP\"},\"prices(address)\":{\"notice\":\"Stored price by token \"},\"setTokenConfig((address,uint256,address,bool,bool,uint256))\":{\"notice\":\"Add single token configs\"},\"setTokenConfigs((address,uint256,address,bool,bool,uint256)[])\":{\"notice\":\"Add multiple token configs at the same time\"},\"setValidateConfig((address,uint256,uint256))\":{\"notice\":\"Add single validation config\"},\"setValidateConfigs((address,uint256,uint256)[])\":{\"notice\":\"Add multiple validation configs at the same time\"},\"tokenConfigs(address)\":{\"notice\":\"Configs by token\"},\"vBNB()\":{\"notice\":\"vBNB address\"},\"validateConfigs(address)\":{\"notice\":\"validation configs by token\"},\"validatePrice(address,uint256)\":{\"notice\":\"Test reported vToken underlying price against stored TWAP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/PivotTwapOracle.sol\":\"PivotTwapOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface OracleInterface {\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface PivotValidator {\\n    function validatePrice(address vToken, uint256 price) external view returns (bool);\\n}\\n\\ninterface PivotOracleInterface is OracleInterface, PivotValidator {\\n}\\n\",\"keccak256\":\"0xfa98a01be22e05cb4b68bd33c03025b9fbe0101ca502cd2f1164ed88b614d24a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PancakeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534827;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary PancakeOracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IPancakePair(pair).price0CumulativeLast();\\n        price1Cumulative = IPancakePair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IPancakePair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IPancakePair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\",\"keccak256\":\"0x27719fa344a35e64c58b6cc0bd56bc146d35d170e28faee031cb2dde3eccafb0\",\"license\":\"UNLICENSED\"},\"contracts/oracles/PivotTwapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/OracleInterface.sol\\\";\\nimport \\\"./TwapOracle.sol\\\";\\n\\nstruct ValidateConfig {\\n    /// @notice vToken address\\n    address vToken;\\n    /// @notice upper bound of deviation between reported price and stored TWAP,\\n    /// beyond which the reported price will be invalidated \\n    uint256 upperBoundRatio;\\n    /// @notice lower bound of deviation between reported price and stored TWAP,\\n    /// below which the reported price will be invalidated \\n    uint256 lowerBoundRatio;\\n}\\n\\n// Wrap TwapOracle with pivot oracle interface to make TwapOracle standalone \\n// and potentially reusable as other types of oracles in the future\\ncontract PivotTwapOracle is TwapOracle, PivotValidator {\\n    using SafeMath for uint256;\\n    \\n    /// @notice validation configs by token\\n    mapping(address => ValidateConfig) public validateConfigs;\\n\\n    /// @notice Emit this event when new validate configs are added\\n    event ValidateConfigAdded(\\n        address indexed vToken, \\n        uint256 indexed upperBound,\\n        uint256 indexed lowerBound\\n    );\\n\\n    /**\\n     * @notice Add multiple validation configs at the same time\\n     * @param configs config array \\n     */\\n    function setValidateConfigs(ValidateConfig[] memory configs) external onlyOwner() {\\n        require(configs.length > 0, \\\"invalid validate config length\\\");\\n        for (uint8 i = 0; i < configs.length; i++) {\\n            setValidateConfig(configs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add single validation config\\n     * @param config config struct\\n     */\\n    function setValidateConfig(ValidateConfig memory config) public \\n        onlyOwner()\\n        notNullAddress(config.vToken)\\n    {\\n        require(config.upperBoundRatio > 0 && config.lowerBoundRatio > 0, \\\"bound must be positive\\\");\\n        require(config.upperBoundRatio > config.lowerBoundRatio, \\\"upper bound must be higher than lowner bound\\\");\\n        validateConfigs[config.vToken] = config;\\n        emit ValidateConfigAdded(\\n            config.vToken, \\n            config.upperBoundRatio,\\n            config.lowerBoundRatio\\n        );\\n    }\\n    \\n    /**\\n     * @notice Test reported vToken underlying price against stored TWAP\\n     * @param vToken vToken address\\n     * @param reporterPrice the price to be tested\\n     */\\n    function validatePrice(address vToken, uint256 reporterPrice) external view returns (bool) {\\n        require(validateConfigs[vToken].upperBoundRatio != 0, \\\"validation config not exist\\\");\\n        require(prices[vToken] != 0, \\\"stored price is not valid\\\");\\n        return isWithinAnchor(vToken, reporterPrice, prices[vToken]);\\n    }\\n\\n    /**\\n     * @notice Test whether the reported price is within the predefined bounds\\n     * @param vToken vToken address\\n     * @param reporterPrice the price to be tested\\n     * @param anchorPrice stored TWAP price as testing anchor\\n     */\\n    function isWithinAnchor(address vToken, uint256 reporterPrice, uint256 anchorPrice) internal view returns (bool) {\\n        if (reporterPrice > 0) {\\n            uint256 anchorRatio = anchorPrice.mul(100e16).div(reporterPrice);\\n            uint256 upperBoundAnchorRatio = validateConfigs[vToken].upperBoundRatio;\\n            uint256 lowerBoundAnchorRatio = validateConfigs[vToken].lowerBoundRatio;\\n            return anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\\n        }\\n        return false;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xca37e3a5bae5fb334e492cfc5089e5de91a0a11a5cd4e55ca6cefc135ca2a0be\",\"license\":\"UNLICENSED\"},\"contracts/oracles/TwapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../libraries/PancakeLibrary.sol\\\";\\nimport \\\"../interfaces/OracleInterface.sol\\\";\\n\\n\\nstruct Observation {\\n    uint256 timestamp;\\n    uint256 acc;\\n}\\n\\nstruct TokenConfig {\\n    /// @notice vToken address, which can't be zero address and can be used for existance check\\n    address vToken;\\n    /// @notice Decimals of underlying asset\\n    uint256 baseUnit;\\n    /// @notice The address of pancake pair\\n    address pancakePool;\\n    /// @notice Whether the token is paired with WBNB\\n    bool isBnbBased;\\n    /// @notice A flag identifies whether the pancake pair is reversed\\n    /// e.g. XVS-WBNB is not reversed, while WBNB-XVS is.\\n    bool isReversedPool;\\n    /// @notice TWAP update period in second, which is the minimum time in seconds required to update TWAP window\\n    uint256 anchorPeriod;\\n}\\n\\ncontract TwapOracle is OwnableUpgradeable, OracleInterface {\\n    using SafeMath for uint256;\\n    using FixedPoint for *;\\n\\n    /// @notice vBNB address\\n    address public vBNB;\\n\\n    /// @notice the base unit of WBNB and BUSD, which are the paired tokens for all assets\\n    uint256 public constant bnbBaseUnit = 1e18;\\n    uint256 public constant busdBaseUnit = 1e18;\\n\\n    uint256 public constant expScale = 1e18;\\n\\n    /// @notice Configs by token\\n    mapping(address => TokenConfig) public tokenConfigs;\\n\\n    /// @notice The current price observation of TWAP. With old and current observations\\n    /// we can calculate the TWAP between this range\\n    mapping(address => Observation) public newObservations;\\n\\n    /// @notice The old price observation of TWAP\\n    mapping(address => Observation) public oldObservations;\\n\\n    /// @notice Stored price by token \\n    mapping(address => uint256) public prices;\\n\\n    /// @notice Emit this event when TWAP window is updated\\n    event TwapWindowUpdated(\\n        address indexed vToken, \\n        uint256 oldTimestamp, \\n        uint256 oldAcc, \\n        uint256 newTimestamp, \\n        uint256 newAcc);\\n\\n    /// @notice Emit this event when TWAP price is updated\\n    event AnchorPriceUpdated(\\n        address indexed vToken,\\n        uint256 price, \\n        uint256 oldTimestamp, \\n        uint256 newTimestamp\\n    );\\n\\n    /// @notice Emit this event when new token configs are added\\n    event TokenConfigAdded(\\n        address indexed vToken, \\n        address indexed pancakePool,\\n        uint256 indexed anchorPeriod\\n    );\\n\\n    modifier notNullAddress(address someone) {\\n        require(someone != address(0), \\\"can't be zero address\\\");\\n        _;\\n    }\\n\\n    function initialize(address vBNB_) public initializer {\\n        __Ownable_init();\\n        require(vBNB_ != address(0), \\\"vBNB can't be zero address\\\");\\n        vBNB = vBNB_;\\n    }\\n\\n    /**\\n     * @notice Add multiple token configs at the same time\\n     * @param configs config array\\n     */\\n    function setTokenConfigs(TokenConfig[] memory configs) external onlyOwner() {\\n        require(configs.length > 0, \\\"length can't be 0\\\");\\n        for (uint8 i = 0; i < configs.length; i++) {\\n            setTokenConfig(configs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add single token configs\\n     * @param config token config struct\\n     */\\n    function setTokenConfig(TokenConfig memory config) public \\n        onlyOwner()\\n        notNullAddress(config.vToken)\\n        notNullAddress(config.pancakePool)\\n    {\\n        require(config.anchorPeriod > 0, \\\"anchor period must be positive\\\");\\n        require(config.baseUnit > 0, \\\"base unit must be positive\\\");\\n        uint256 cumulativePrice = currentCumulativePrice(config);\\n\\n        // Initialize observation data\\n        oldObservations[config.vToken].timestamp = block.timestamp;\\n        newObservations[config.vToken].timestamp = block.timestamp;\\n        oldObservations[config.vToken].acc = cumulativePrice;\\n        newObservations[config.vToken].acc = cumulativePrice;\\n        tokenConfigs[config.vToken] = config;\\n        emit TokenConfigAdded(\\n            config.vToken, \\n            config.pancakePool,\\n            config.anchorPeriod\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the underlying TWAP price of input vToken\\n     * @param vToken vToken address\\n     * @return price in USD, with 18 decimals\\n     */\\n    function getUnderlyingPrice(address vToken) external override view returns (uint256) {\\n        require(tokenConfigs[vToken].vToken != address(0), \\\"vToken not exist\\\");\\n        uint256 price = prices[vToken];\\n\\n        // if price is 0, it means the price hasn't been updated yet and it's meaningless, revert\\n        require(price > 0, \\\"TWAP price must be positive\\\"); \\n        return price;\\n    }\\n\\n    /**\\n     * @notice Fetches the current token/WBNB and token/BUSD price accumulator from pancakeswap.\\n     * @return cumulative price of target token regardless of pair order \\n     */\\n    function currentCumulativePrice(TokenConfig memory config) public view returns (uint256) {\\n        (uint256 price0, uint256 price1,) = PancakeOracleLibrary.currentCumulativePrices(config.pancakePool);\\n        if (config.isReversedPool) {\\n            return price1;\\n        } else {\\n            return price0;\\n        }\\n    }\\n\\n    function updateTwap(address vToken) public returns (uint256) {\\n        require(tokenConfigs[vToken].vToken != address(0), \\\"vTokne not exist\\\");\\n        // Update & fetch WBNB price first, so we can calculate the price of WBNB paired token\\n        if (vToken != vBNB && tokenConfigs[vToken].isBnbBased) {\\n            updateTwap(vBNB);\\n        }\\n        return updateTwapInternal(tokenConfigs[vToken]);\\n    }\\n\\n    /**\\n     * @notice Fetches the current token/BUSD price from PancakeSwap, with 18 decimals of precision.\\n     * @return price in USD, with 18 decimals\\n     */\\n    function updateTwapInternal(TokenConfig memory config) internal virtual returns (uint256) {\\n        // pokeWindowValues already handled reversed pool cases, \\n        // priceAverage will always be Token/BNB or Token/BUSD TWAP price.\\n        (uint256 nowCumulativePrice, uint256 oldCumulativePrice, uint256 oldTimestamp) = pokeWindowValues(config);\\n\\n        // This should be impossible, but better safe than sorry\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\n        uint256 timeElapsed = block.timestamp.sub(oldTimestamp);\\n\\n        // Calculate Pancakge TWAP\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224(\\n            nowCumulativePrice.sub(oldCumulativePrice).div(timeElapsed)\\n        ));\\n        // TWAP price with 1e18 decimal mantissa\\n        uint256 priceAverageMantissa = priceAverage.decode112with18();\\n\\n        // To cancel the decimals in cumulative price, we need to mulitply the average price with \\n        // tokenBaseUnit / (wbnbBaseUnit or busdBaseUnit, which is 1e18)\\n        uint256 pairedTokenBaseUnit = config.isBnbBased ? bnbBaseUnit : busdBaseUnit;\\n        uint256 anchorPriceMantissa = priceAverageMantissa.mul(config.baseUnit).div(pairedTokenBaseUnit);\\n\\n        // if this token is paired with BNB, convert its price to USD\\n        if (config.isBnbBased) {\\n            uint256 bnbPrice = prices[vBNB];\\n            require(bnbPrice != 0, \\\"bnb price is invalid\\\");\\n            anchorPriceMantissa = anchorPriceMantissa.mul(bnbPrice).div(bnbBaseUnit);\\n        }\\n\\n        require(anchorPriceMantissa != 0, \\\"twap price cannot be 0\\\");\\n\\n        emit AnchorPriceUpdated(config.vToken, anchorPriceMantissa, oldTimestamp, block.timestamp);\\n        \\n        // save anchor price, which is 1e18 decimals\\n        prices[config.vToken] = anchorPriceMantissa;\\n\\n        return anchorPriceMantissa;\\n    }\\n\\n    /**\\n     * @notice Update new and old observations of lagging window if period elapsed.\\n     * @return cumulative price & old observation\\n     */\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint256, uint256, uint256) {\\n        uint256 cumulativePrice = currentCumulativePrice(config);\\n\\n        Observation memory newObservation = newObservations[config.vToken];\\n\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\n        uint256 timeElapsed = block.timestamp.sub(newObservation.timestamp);\\n        if (timeElapsed >= config.anchorPeriod) {\\n            oldObservations[config.vToken].timestamp = newObservation.timestamp;\\n            oldObservations[config.vToken].acc = newObservation.acc;\\n\\n            newObservations[config.vToken].timestamp = block.timestamp;\\n            newObservations[config.vToken].acc = cumulativePrice;\\n            emit TwapWindowUpdated(\\n                config.vToken,\\n                newObservation.timestamp,\\n                block.timestamp, \\n                newObservation.acc, \\n                cumulativePrice\\n            );\\n        }\\n        return (cumulativePrice, oldObservations[config.vToken].acc, oldObservations[config.vToken].timestamp);\\n    }\\n}\",\"keccak256\":\"0x540c7e9038cea4566063648c4424e2d67e2608a19284c1239721297ea3f69b4f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80639c357615116100d8578063cbf679191161008c578063fc57d4df11610066578063fc57d4df146103d0578063fd45a433146103e3578063fe16e80c1461040657600080fd5b8063cbf679191461038a578063cfed246b1461039d578063f2fde38b146103bd57600080fd5b8063b8a8a626116100bd578063b8a8a6261461027c578063bca9e11614610319578063c4d66de81461037757600080fd5b80639c357615146102f3578063af9e6c5b1461030657600080fd5b806369aa3ac61161012f578063725068a511610114578063725068a5146102935780638cea8c26146102a65780638da5cb5b146102e257600080fd5b806369aa3ac61461027c578063715018a61461028b57600080fd5b80632b9d9dea116101605780632b9d9dea1461023057806333e1567f14610251578063609f0f361461027c57600080fd5b80631b69dc5f1461017c578063234a34461461021b575b600080fd5b6101d461018a3660046117f5565b60666020526000908152604090208054600182015460028301546003909301546001600160a01b0392831693919282169160ff600160a01b8204811692600160a81b909204169086565b604080516001600160a01b03978816815260208101969096529390951692840192909252151560608301521515608082015260a081019190915260c0015b60405180910390f35b61022e61022936600461191f565b61042d565b005b61024361023e3660046119be565b6104d5565b604051908152602001610212565b606554610264906001600160a01b031681565b6040516001600160a01b039091168152602001610212565b610243670de0b6b3a764000081565b61022e610504565b6102436102a13660046117f5565b610518565b6102cd6102b43660046117f5565b6067602052600090815260409020805460019091015482565b60408051928352602083019190915201610212565b6033546001600160a01b0316610264565b61022e610301366004611a3b565b61065f565b61022e610314366004611ac9565b6106fe565b6103526103273660046117f5565b606a602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001610212565b61022e6103853660046117f5565b6108b9565b61022e6103983660046119be565b610a4a565b6102436103ab3660046117f5565b60696020526000908152604090205481565b61022e6103cb3660046117f5565b610cfc565b6102436103de3660046117f5565b610d8c565b6103f66103f1366004611ae5565b610e5b565b6040519015158152602001610212565b6102cd6104143660046117f5565b6068602052600090815260409020805460019091015482565b610435610f59565b600081511161048b5760405162461bcd60e51b815260206004820152601160248201527f6c656e6774682063616e2774206265203000000000000000000000000000000060448201526064015b60405180910390fd5b60005b81518160ff1610156104d1576104bf828260ff16815181106104b2576104b2611b0f565b6020026020010151610a4a565b806104c981611b3b565b91505061048e565b5050565b60008060006104e78460400151610fb3565b50915091508360800151156104fd579392505050565b5092915050565b61050c610f59565b6105166000611186565b565b6001600160a01b038181166000908152606660205260408120549091166105815760405162461bcd60e51b815260206004820152601060248201527f76546f6b6e65206e6f74206578697374000000000000000000000000000000006044820152606401610482565b6065546001600160a01b038381169116148015906105c157506001600160a01b038216600090815260666020526040902060020154600160a01b900460ff165b156105dd576065546105db906001600160a01b0316610518565b505b6001600160a01b03808316600090815260666020908152604091829020825160c08101845281548516815260018201549281019290925260028101549384169282019290925260ff600160a01b8404811615156060830152600160a81b909304909216151560808301526003015460a0820152610659906111d8565b92915050565b610667610f59565b60008151116106b85760405162461bcd60e51b815260206004820152601e60248201527f696e76616c69642076616c696461746520636f6e666967206c656e67746800006044820152606401610482565b60005b81518160ff1610156104d1576106ec828260ff16815181106106df576106df611b0f565b60200260200101516106fe565b806106f681611b3b565b9150506106bb565b610706610f59565b80516001600160a01b03811661075e5760405162461bcd60e51b815260206004820152601560248201527f63616e2774206265207a65726f206164647265737300000000000000000000006044820152606401610482565b60008260200151118015610776575060008260400151115b6107c25760405162461bcd60e51b815260206004820152601660248201527f626f756e64206d75737420626520706f736974697665000000000000000000006044820152606401610482565b816040015182602001511161083f5760405162461bcd60e51b815260206004820152602c60248201527f757070657220626f756e64206d75737420626520686967686572207468616e2060448201527f6c6f776e657220626f756e6400000000000000000000000000000000000000006064820152608401610482565b81516001600160a01b039081166000908152606a60209081526040808320865181546001600160a01b03191695169485178155918601516001830181905581870151600290930183905590519193909290917f28e2d96bdcf74fe6203e40d159d27ec2e15230239c0aee4a0a914196c550e6d19190a45050565b600054610100900460ff16158080156108d95750600054600160ff909116105b806108f35750303b1580156108f3575060005460ff166001145b6109655760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610482565b6000805460ff191660011790558015610988576000805461ff0019166101001790555b610990611427565b6001600160a01b0382166109e65760405162461bcd60e51b815260206004820152601a60248201527f76424e422063616e2774206265207a65726f20616464726573730000000000006044820152606401610482565b606580546001600160a01b0319166001600160a01b03841617905580156104d1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b610a52610f59565b80516001600160a01b038116610aaa5760405162461bcd60e51b815260206004820152601560248201527f63616e2774206265207a65726f206164647265737300000000000000000000006044820152606401610482565b60408201516001600160a01b038116610b055760405162461bcd60e51b815260206004820152601560248201527f63616e2774206265207a65726f206164647265737300000000000000000000006044820152606401610482565b60008360a0015111610b595760405162461bcd60e51b815260206004820152601e60248201527f616e63686f7220706572696f64206d75737420626520706f73697469766500006044820152606401610482565b6000836020015111610bad5760405162461bcd60e51b815260206004820152601a60248201527f6261736520756e6974206d75737420626520706f7369746976650000000000006044820152606401610482565b6000610bb8846104d5565b84516001600160a01b03908116600090815260686020818152604080842042908190558a51861685526067808452828620919091558a518616855292825280842060019081018790558a51861685529282528084208301869055895185168452606682528084208a5181549087166001600160a01b031990911681178255928b015193810193909355808a015160028401805460608d015160808e01511515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff911515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009093169490991693841791909117169690961790955560a08a0151600390930183905551949550909390917f3cc8d9cb9370a23a8b9ffa75efa24cecb65c4693980e58260841adc474983c5f91a450505050565b610d04610f59565b6001600160a01b038116610d805760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610482565b610d8981611186565b50565b6001600160a01b03818116600090815260666020526040812054909116610df55760405162461bcd60e51b815260206004820152601060248201527f76546f6b656e206e6f74206578697374000000000000000000000000000000006044820152606401610482565b6001600160a01b038216600090815260696020526040902054806106595760405162461bcd60e51b815260206004820152601b60248201527f54574150207072696365206d75737420626520706f73697469766500000000006044820152606401610482565b6001600160a01b0382166000908152606a60205260408120600101548103610ec55760405162461bcd60e51b815260206004820152601b60248201527f76616c69646174696f6e20636f6e666967206e6f7420657869737400000000006044820152606401610482565b6001600160a01b0383166000908152606960205260408120549003610f2c5760405162461bcd60e51b815260206004820152601960248201527f73746f726564207072696365206973206e6f742076616c6964000000000000006044820152606401610482565b6001600160a01b038316600090815260696020526040902054610f52908490849061149a565b9392505050565b6033546001600160a01b031633146105165760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610482565b6000806000610fc0611505565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611000573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110249190611b5a565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110889190611b5a565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f19190611b91565b9250925092508363ffffffff168163ffffffff161461117c5760006111168286611be1565b90508063ffffffff16611129848661151b565b5161113d91906001600160e01b0316611c06565b6111479088611c25565b96508063ffffffff1661115a858561151b565b5161116e91906001600160e01b0316611c06565b6111789087611c25565b9550505b5050509193909250565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000806111e7856115e4565b92509250925080421161123c5760405162461bcd60e51b815260206004820152601a60248201527f6e6f77206d75737420636f6d65206166746572206265666f72650000000000006044820152606401610482565b60006112484283611721565b9050600060405180602001604052806112748461126e888a61172190919063ffffffff16565b9061172d565b6001600160e01b031690529050600061128c82611739565b9050600088606001516112a757670de0b6b3a76400006112b1565b670de0b6b3a76400005b905060006112d08261126e8c602001518661175990919063ffffffff16565b9050896060015115611361576065546001600160a01b0316600090815260696020526040812054908190036113475760405162461bcd60e51b815260206004820152601460248201527f626e6220707269636520697320696e76616c69640000000000000000000000006044820152606401610482565b61135d670de0b6b3a764000061126e8484611759565b9150505b806000036113b15760405162461bcd60e51b815260206004820152601660248201527f747761702070726963652063616e6e6f742062652030000000000000000000006044820152606401610482565b89516040805183815260208101899052428183015290516001600160a01b03909216917f7d881580fb2bb7844e8ecf8df26510247c4bbea2735d40bf0d9ac33c0d9acd819181900360600190a298516001600160a01b031660009081526069602052604090208990555096979650505050505050565b600054610100900460ff166114925760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610482565b610516611765565b600082156114fb5760006114ba8461126e85670de0b6b3a7640000611759565b6001600160a01b0386166000908152606a602052604090206001810154600290910154919250908183118015906114f15750808310155b9350505050610f52565b5060009392505050565b600061151664010000000042611c53565b905090565b6040805160208101909152600081526000826dffffffffffffffffffffffffffff161161158a5760405162461bcd60e51b815260206004820152601760248201527f4669786564506f696e743a204449565f42595f5a45524f0000000000000000006044820152606401610482565b6040805160208101909152806115d26dffffffffffffffffffffffffffff85167bffffffffffffffffffffffffffff0000000000000000000000000000607088901b16611c67565b6001600160e01b031690529392505050565b6000806000806115f3856104d5565b85516001600160a01b031660009081526067602090815260408083208151808301909252805480835260019091015492820192909252929350611637904290611721565b90508660a0015181106116ec57815187516001600160a01b0390811660009081526068602090815260408083209490945580860180518c51851684528584206001908101919091558c51851684526067835285842042908190558d518616855293869020018890558b5187519151865192835292820193909352938401526060830186905216907f87208a84ec7402c933c70c261e53b733a9f1c893d73e941a152435d58177a2649060800160405180910390a25b505084516001600160a01b03908116600090815260686020526040808220600101549751909216815220549095909350915050565b6000610f528284611c8d565b6000610f528284611ca4565b8051600090610659906612725dd1d243ab906001600160e01b0316611ca4565b6000610f528284611c06565b600054610100900460ff166117d05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610482565b61051633611186565b80356001600160a01b03811681146117f057600080fd5b919050565b60006020828403121561180757600080fd5b610f52826117d9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561184f5761184f611810565b604052919050565b600067ffffffffffffffff82111561187157611871611810565b5060051b60200190565b803580151581146117f057600080fd5b600060c0828403121561189d57600080fd5b60405160c0810181811067ffffffffffffffff821117156118c0576118c0611810565b6040529050806118cf836117d9565b8152602083013560208201526118e7604084016117d9565b60408201526118f86060840161187b565b60608201526119096080840161187b565b608082015260a083013560a08201525092915050565b6000602080838503121561193257600080fd5b823567ffffffffffffffff81111561194957600080fd5b8301601f8101851361195a57600080fd5b803561196d61196882611857565b611826565b81815260c0918202830184019184820191908884111561198c57600080fd5b938501935b838510156119b2576119a3898661188b565b83529384019391850191611991565b50979650505050505050565b600060c082840312156119d057600080fd5b610f52838361188b565b6000606082840312156119ec57600080fd5b6040516060810181811067ffffffffffffffff82111715611a0f57611a0f611810565b604052905080611a1e836117d9565b815260208301356020820152604083013560408201525092915050565b60006020808385031215611a4e57600080fd5b823567ffffffffffffffff811115611a6557600080fd5b8301601f81018513611a7657600080fd5b8035611a8461196882611857565b81815260609182028301840191848201919088841115611aa357600080fd5b938501935b838510156119b257611aba89866119da565b83529384019391850191611aa8565b600060608284031215611adb57600080fd5b610f5283836119da565b60008060408385031215611af857600080fd5b611b01836117d9565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103611b5157611b51611b25565b60010192915050565b600060208284031215611b6c57600080fd5b5051919050565b80516dffffffffffffffffffffffffffff811681146117f057600080fd5b600080600060608486031215611ba657600080fd5b611baf84611b73565b9250611bbd60208501611b73565b9150604084015163ffffffff81168114611bd657600080fd5b809150509250925092565b600063ffffffff83811690831681811015611bfe57611bfe611b25565b039392505050565b6000816000190483118215151615611c2057611c20611b25565b500290565b60008219821115611c3857611c38611b25565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611c6257611c62611c3d565b500690565b60006001600160e01b0380841680611c8157611c81611c3d565b92169190910492915050565b600082821015611c9f57611c9f611b25565b500390565b600082611cb357611cb3611c3d565b50049056fea164736f6c634300080d000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "currentCumulativePrice((address,uint256,address,bool,bool,uint256))": {
        "returns": {
          "_0": "cumulative price of target token regardless of pair order "
        }
      },
      "getUnderlyingPrice(address)": {
        "params": {
          "vToken": "vToken address"
        },
        "returns": {
          "_0": "price in USD, with 18 decimals"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTokenConfig((address,uint256,address,bool,bool,uint256))": {
        "params": {
          "config": "token config struct"
        }
      },
      "setTokenConfigs((address,uint256,address,bool,bool,uint256)[])": {
        "params": {
          "configs": "config array"
        }
      },
      "setValidateConfig((address,uint256,uint256))": {
        "params": {
          "config": "config struct"
        }
      },
      "setValidateConfigs((address,uint256,uint256)[])": {
        "params": {
          "configs": "config array "
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "validatePrice(address,uint256)": {
        "params": {
          "reporterPrice": "the price to be tested",
          "vToken": "vToken address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AnchorPriceUpdated(address,uint256,uint256,uint256)": {
        "notice": "Emit this event when TWAP price is updated"
      },
      "TokenConfigAdded(address,address,uint256)": {
        "notice": "Emit this event when new token configs are added"
      },
      "TwapWindowUpdated(address,uint256,uint256,uint256,uint256)": {
        "notice": "Emit this event when TWAP window is updated"
      },
      "ValidateConfigAdded(address,uint256,uint256)": {
        "notice": "Emit this event when new validate configs are added"
      }
    },
    "kind": "user",
    "methods": {
      "bnbBaseUnit()": {
        "notice": "the base unit of WBNB and BUSD, which are the paired tokens for all assets"
      },
      "currentCumulativePrice((address,uint256,address,bool,bool,uint256))": {
        "notice": "Fetches the current token/WBNB and token/BUSD price accumulator from pancakeswap."
      },
      "getUnderlyingPrice(address)": {
        "notice": "Get the underlying TWAP price of input vToken"
      },
      "newObservations(address)": {
        "notice": "The current price observation of TWAP. With old and current observations we can calculate the TWAP between this range"
      },
      "oldObservations(address)": {
        "notice": "The old price observation of TWAP"
      },
      "prices(address)": {
        "notice": "Stored price by token "
      },
      "setTokenConfig((address,uint256,address,bool,bool,uint256))": {
        "notice": "Add single token configs"
      },
      "setTokenConfigs((address,uint256,address,bool,bool,uint256)[])": {
        "notice": "Add multiple token configs at the same time"
      },
      "setValidateConfig((address,uint256,uint256))": {
        "notice": "Add single validation config"
      },
      "setValidateConfigs((address,uint256,uint256)[])": {
        "notice": "Add multiple validation configs at the same time"
      },
      "tokenConfigs(address)": {
        "notice": "Configs by token"
      },
      "vBNB()": {
        "notice": "vBNB address"
      },
      "validateConfigs(address)": {
        "notice": "validation configs by token"
      },
      "validatePrice(address,uint256)": {
        "notice": "Test reported vToken underlying price against stored TWAP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 693,
        "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4378,
        "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
        "label": "vBNB",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 4394,
        "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
        "label": "tokenConfigs",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_struct(TokenConfig)4366_storage)"
      },
      {
        "astId": 4400,
        "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
        "label": "newObservations",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_struct(Observation)4347_storage)"
      },
      {
        "astId": 4406,
        "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
        "label": "oldObservations",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_struct(Observation)4347_storage)"
      },
      {
        "astId": 4411,
        "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
        "label": "prices",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3817,
        "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
        "label": "validateConfigs",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(ValidateConfig)3804_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Observation)4347_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Observation)",
        "numberOfBytes": "32",
        "value": "t_struct(Observation)4347_storage"
      },
      "t_mapping(t_address,t_struct(TokenConfig)4366_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenConfig)4366_storage"
      },
      "t_mapping(t_address,t_struct(ValidateConfig)3804_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ValidateConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidateConfig)3804_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Observation)4347_storage": {
        "encoding": "inplace",
        "label": "struct Observation",
        "members": [
          {
            "astId": 4344,
            "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4346,
            "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
            "label": "acc",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenConfig)4366_storage": {
        "encoding": "inplace",
        "label": "struct TokenConfig",
        "members": [
          {
            "astId": 4350,
            "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
            "label": "vToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4353,
            "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
            "label": "baseUnit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4356,
            "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
            "label": "pancakePool",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4359,
            "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
            "label": "isBnbBased",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 4362,
            "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
            "label": "isReversedPool",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 4365,
            "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
            "label": "anchorPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ValidateConfig)3804_storage": {
        "encoding": "inplace",
        "label": "struct ValidateConfig",
        "members": [
          {
            "astId": 3797,
            "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
            "label": "vToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3800,
            "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
            "label": "upperBoundRatio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3803,
            "contract": "contracts/oracles/PivotTwapOracle.sol:PivotTwapOracle",
            "label": "lowerBoundRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}