{
  "address": "0x642A61aae9D8a8664B57B719CDc5bF6cf1947eDf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vBnbAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaiAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getFeedRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VBep20Interface",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sidRegistryAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sidRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBnb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vai",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x902fe24cb26a046e6bedf0e965757b543b18e1500f6c2fbf185d25a97f736455",
  "receipt": {
    "to": null,
    "from": "0x8BDA9f9E1fEF0DFd404Fef338D9fE4c543d172e1",
    "contractAddress": "0x642A61aae9D8a8664B57B719CDc5bF6cf1947eDf",
    "transactionIndex": 1,
    "gasUsed": "672271",
    "logsBloom": "0x
    "blockHash": "0x3bddefc72b877721ce2bcf1d1dc3be6c7a7173cd42f0998cd38411dfe54972f3",
    "transactionHash": "0x902fe24cb26a046e6bedf0e965757b543b18e1500f6c2fbf185d25a97f736455",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 28099636,
        "transactionHash": "0x902fe24cb26a046e6bedf0e965757b543b18e1500f6c2fbf185d25a97f736455",
        "address": "0x642A61aae9D8a8664B57B719CDc5bF6cf1947eDf",
        "topics": ["0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 1,
        "blockHash": "0x3bddefc72b877721ce2bcf1d1dc3be6c7a7173cd42f0998cd38411dfe54972f3"
      }
    ],
    "blockNumber": 28099636,
    "cumulativeGasUsed": "745968",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x2E7222e51c0f6e98610A1543Aa3836E092CDe62c", "0x5fFbE5302BadED40941A403228E6AD03f93752d9"],
  "numDeployments": 1,
  "solcInputHash": "30f2cb3e89e183b8669f05bddf9426d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vBnbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaiAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getFeedRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VBep20Interface\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sidRegistryAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sidRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"params\":{\"vBnbAddress\":\"The address of the vBNB\",\"vaiAddress\":\"The address of the VAI\"}},\"getFeedRegistryAddress()\":{\"returns\":{\"_0\":\"feedRegistryAddress Address of binance oracle feed registry.\"}},\"getUnderlyingPrice(address)\":{\"params\":{\"vToken\":\"Address of the vToken\"},\"returns\":{\"_0\":\"Price in USD\"}},\"initialize(address)\":{\"params\":{\"_sidRegistryAddress\":\"Address of SID registry\"}}},\"stateVariables\":{\"vBnb\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"vai\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor for the implementation contract. Sets immutable variables.\"},\"getFeedRegistryAddress()\":{\"notice\":\"Uses Space ID to fetch the feed registry address\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Gets the price of a vToken from the binance oracle\"},\"initialize(address)\":{\"notice\":\"Sets the contracts required to fetch prices\"},\"vBnb()\":{\"notice\":\"vBNB address\"},\"vai()\":{\"notice\":\"VAI address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/BinanceOracle.sol\":\"BinanceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/interfaces/FeedRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface FeedRegistryInterface {\\n    function latestRoundDataByName(\\n        string memory base,\\n        string memory quote\\n    )\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function decimalsByName(string memory base, string memory quote) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x326a2ae7b1ecfc3671ff569363a39c35f7430b13c545d388a0d9d8e29dd5bdb3\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/PublicResolverInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n// SPDX-FileCopyrightText: 2022 Venus\\npragma solidity 0.8.13;\\n\\ninterface PublicResolverInterface {\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xdacc261d23a3170a731f5a22377b452f227ebd0e54c7356278b271b55f82455d\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/SIDRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n// SPDX-FileCopyrightText: 2022 Venus\\npragma solidity 0.8.13;\\n\\ninterface SIDRegistryInterface {\\n    function resolver(bytes32 node) external view returns (address);\\n}\\n\",\"keccak256\":\"0x62bc5b95d657a1a8c64a1231510c3e8da7b6a71cb4bde7cd624854cd46f08a49\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/VBep20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface VBep20Interface is IERC20Metadata {\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    function underlying() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3f845cd51b2d82f7932ac6c0ab714df97f733b01ce50f6fb0adb4c28447d4618\",\"license\":\"BSD-3-Clause\"},\"contracts/oracles/BinanceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/VBep20Interface.sol\\\";\\nimport \\\"../interfaces/SIDRegistryInterface.sol\\\";\\nimport \\\"../interfaces/FeedRegistryInterface.sol\\\";\\nimport \\\"../interfaces/PublicResolverInterface.sol\\\";\\n\\ncontract BinanceOracle is Initializable {\\n    address public sidRegistryAddress;\\n\\n    /// @notice vBNB address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable vBnb;\\n\\n    /// @notice VAI address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable vai;\\n\\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\\n    /// @param vBnbAddress The address of the vBNB\\n    /// @param vaiAddress The address of the VAI\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address vBnbAddress, address vaiAddress) {\\n        require(vBnbAddress != address(0), \\\"vBNB can't be zero address\\\");\\n        require(vaiAddress != address(0), \\\"VAI can't be zero address\\\");\\n        vBnb = vBnbAddress;\\n        vai = vaiAddress;\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Sets the contracts required to fetch prices\\n     * @param _sidRegistryAddress Address of SID registry\\n     */\\n    function initialize(address _sidRegistryAddress) public initializer {\\n        sidRegistryAddress = _sidRegistryAddress;\\n    }\\n\\n    /**\\n     * @notice Uses Space ID to fetch the feed registry address\\n     * @return feedRegistryAddress Address of binance oracle feed registry.\\n     */\\n    function getFeedRegistryAddress() public view returns (address) {\\n        bytes32 nodeHash = 0x94fe3821e0768eb35012484db4df61890f9a6ca5bfa984ef8ff717e73139faff;\\n\\n        SIDRegistryInterface sidRegistry = SIDRegistryInterface(sidRegistryAddress);\\n        address publicResolverAddress = sidRegistry.resolver(nodeHash);\\n        PublicResolverInterface publicResolver = PublicResolverInterface(publicResolverAddress);\\n\\n        return publicResolver.addr(nodeHash);\\n    }\\n\\n    /**\\n     * @notice Gets the price of a vToken from the binance oracle\\n     * @param vToken Address of the vToken\\n     * @return Price in USD\\n     */\\n    function getUnderlyingPrice(VBep20Interface vToken) public view returns (uint256) {\\n        string memory symbol;\\n        uint256 decimals;\\n\\n        // VBNB token doesn't have `underlying` method\\n        if (address(vToken) == vBnb) {\\n            symbol = \\\"BNB\\\";\\n            decimals = 18;\\n        } else if (address(vToken) == vai) {\\n            symbol = \\\"VAI\\\";\\n            decimals = 18;\\n        } else {\\n            IERC20Metadata underlyingToken = IERC20Metadata(vToken.underlying());\\n            symbol = underlyingToken.symbol();\\n            decimals = underlyingToken.decimals();\\n        }\\n\\n        if (keccak256(bytes(symbol)) == keccak256(bytes(\\\"WBNB\\\"))) {\\n            symbol = \\\"BNB\\\";\\n        }\\n\\n        FeedRegistryInterface feedRegistry = FeedRegistryInterface(getFeedRegistryAddress());\\n\\n        (, int256 answer, , , ) = feedRegistry.latestRoundDataByName(symbol, \\\"USD\\\");\\n\\n        uint256 decimalDelta = feedRegistry.decimalsByName(symbol, \\\"USD\\\");\\n        return (uint256(answer) * (10 ** (18 - decimalDelta))) * (10 ** (18 - decimals));\\n    }\\n}\\n\",\"keccak256\":\"0xab6ef5a906cfe291db3f5ee5f827b3d09fe7e8de7fbe8b3f804ef65f00dda431\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610cdf380380610cdf83398101604081905261002f916101da565b6001600160a01b03821661008a5760405162461bcd60e51b815260206004820152601a60248201527f76424e422063616e2774206265207a65726f206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b0381166100e05760405162461bcd60e51b815260206004820152601960248201527f5641492063616e2774206265207a65726f2061646472657373000000000000006044820152606401610081565b6001600160a01b03808316608052811660a0526100fb610102565b505061020d565b600054610100900460ff161561016a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608401610081565b60005460ff90811610156101bc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b80516001600160a01b03811681146101d557600080fd5b919050565b600080604083850312156101ed57600080fd5b6101f6836101be565b9150610204602084016101be565b90509250929050565b60805160a051610aa161023e6000396000818160d101526103cc01526000818160a201526103700152610aa16000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063475e7de5146100675780635ba3792d1461009d57806399fe040e146100c4578063b62e4c92146100cc578063c4d66de8146100f3578063fc57d4df14610108575b600080fd5b600054610080906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100807f000000000000000000000000000000000000000000000000000000000000000081565b610080610129565b6100807f000000000000000000000000000000000000000000000000000000000000000081565b61010661010136600461071c565b610238565b005b61011b61011636600461071c565b610368565b604051908152602001610094565b60008054604051630178b8bf60e01b81527f94fe3821e0768eb35012484db4df61890f9a6ca5bfa984ef8ff717e73139faff60048201819052916201000090046001600160a01b03169083908290630178b8bf90602401602060405180830381865afa15801561019d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c19190610740565b604051631d9dabef60e11b81526004810185905290915081906001600160a01b03821690633b3b57de90602401602060405180830381865afa15801561020b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022f9190610740565b94505050505090565b600054610100900460ff16158080156102585750600054600160ff909116105b806102725750303b158015610272575060005460ff166001145b6102d95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156102fc576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015610364576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316036103ca57505060408051808201909152600381526221272160e91b6020820152601261055d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03160361042657505060408051808201909152600381526256414960e81b6020820152601261055d565b6000846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048a9190610740565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104f291908101906107a3565b9250806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105569190610845565b60ff169150505b6040805180820190915260048152632ba1272160e11b6020918201528251908301207f95a8318495ccc03d10cce56573b91a66a3b235a7a84e6cbaccd62d888d3e4f19016105c4576040518060400160405280600381526020016221272160e91b81525091505b60006105ce610129565b90506000816001600160a01b031663bfda5e71856040518263ffffffff1660e01b81526004016105fe9190610868565b60a060405180830381865afa15801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f91906108dd565b5050509150506000826001600160a01b0316636e91995a866040518263ffffffff1660e01b81526004016106739190610868565b602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190610845565b60ff1690506106c4846012610943565b6106cf90600a610a40565b6106da826012610943565b6106e590600a610a40565b6106ef9084610a4c565b6106f99190610a4c565b979650505050505050565b6001600160a01b038116811461071957600080fd5b50565b60006020828403121561072e57600080fd5b813561073981610704565b9392505050565b60006020828403121561075257600080fd5b815161073981610704565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561078e578181015183820152602001610776565b8381111561079d576000848401525b50505050565b6000602082840312156107b557600080fd5b815167ffffffffffffffff808211156107cd57600080fd5b818401915084601f8301126107e157600080fd5b8151818111156107f3576107f361075d565b604051601f8201601f19908116603f0116810190838211818310171561081b5761081b61075d565b8160405282815287602084870101111561083457600080fd5b6106f9836020830160208801610773565b60006020828403121561085757600080fd5b815160ff8116811461073957600080fd5b6040815260008251806040840152610887816060850160208701610773565b601f19601f82011683019050606083820301602084015260036060820152621554d160ea1b608082015260a0810191505092915050565b805169ffffffffffffffffffff811681146108d857600080fd5b919050565b600080600080600060a086880312156108f557600080fd5b6108fe866108be565b9450602086015193506040860151925060608601519150610921608087016108be565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b6000828210156109555761095561092d565b500390565b600181815b8085111561099557816000190482111561097b5761097b61092d565b8085161561098857918102915b93841c939080029061095f565b509250929050565b6000826109ac57506001610a3a565b816109b957506000610a3a565b81600181146109cf57600281146109d9576109f5565b6001915050610a3a565b60ff8411156109ea576109ea61092d565b50506001821b610a3a565b5060208310610133831016604e8410600b8410161715610a18575081810a610a3a565b610a22838361095a565b8060001904821115610a3657610a3661092d565b0290505b92915050565b6000610739838361099d565b6000816000190483118215151615610a6657610a6661092d565b50029056fea264697066735822122068fefea2c8a8c140d98a81d480a20b06adc587bc45e84dff015dc66941c9b56d64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063475e7de5146100675780635ba3792d1461009d57806399fe040e146100c4578063b62e4c92146100cc578063c4d66de8146100f3578063fc57d4df14610108575b600080fd5b600054610080906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100807f000000000000000000000000000000000000000000000000000000000000000081565b610080610129565b6100807f000000000000000000000000000000000000000000000000000000000000000081565b61010661010136600461071c565b610238565b005b61011b61011636600461071c565b610368565b604051908152602001610094565b60008054604051630178b8bf60e01b81527f94fe3821e0768eb35012484db4df61890f9a6ca5bfa984ef8ff717e73139faff60048201819052916201000090046001600160a01b03169083908290630178b8bf90602401602060405180830381865afa15801561019d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c19190610740565b604051631d9dabef60e11b81526004810185905290915081906001600160a01b03821690633b3b57de90602401602060405180830381865afa15801561020b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022f9190610740565b94505050505090565b600054610100900460ff16158080156102585750600054600160ff909116105b806102725750303b158015610272575060005460ff166001145b6102d95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156102fc576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015610364576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316036103ca57505060408051808201909152600381526221272160e91b6020820152601261055d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03160361042657505060408051808201909152600381526256414960e81b6020820152601261055d565b6000846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048a9190610740565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104f291908101906107a3565b9250806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105569190610845565b60ff169150505b6040805180820190915260048152632ba1272160e11b6020918201528251908301207f95a8318495ccc03d10cce56573b91a66a3b235a7a84e6cbaccd62d888d3e4f19016105c4576040518060400160405280600381526020016221272160e91b81525091505b60006105ce610129565b90506000816001600160a01b031663bfda5e71856040518263ffffffff1660e01b81526004016105fe9190610868565b60a060405180830381865afa15801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f91906108dd565b5050509150506000826001600160a01b0316636e91995a866040518263ffffffff1660e01b81526004016106739190610868565b602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190610845565b60ff1690506106c4846012610943565b6106cf90600a610a40565b6106da826012610943565b6106e590600a610a40565b6106ef9084610a4c565b6106f99190610a4c565b979650505050505050565b6001600160a01b038116811461071957600080fd5b50565b60006020828403121561072e57600080fd5b813561073981610704565b9392505050565b60006020828403121561075257600080fd5b815161073981610704565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561078e578181015183820152602001610776565b8381111561079d576000848401525b50505050565b6000602082840312156107b557600080fd5b815167ffffffffffffffff808211156107cd57600080fd5b818401915084601f8301126107e157600080fd5b8151818111156107f3576107f361075d565b604051601f8201601f19908116603f0116810190838211818310171561081b5761081b61075d565b8160405282815287602084870101111561083457600080fd5b6106f9836020830160208801610773565b60006020828403121561085757600080fd5b815160ff8116811461073957600080fd5b6040815260008251806040840152610887816060850160208701610773565b601f19601f82011683019050606083820301602084015260036060820152621554d160ea1b608082015260a0810191505092915050565b805169ffffffffffffffffffff811681146108d857600080fd5b919050565b600080600080600060a086880312156108f557600080fd5b6108fe866108be565b9450602086015193506040860151925060608601519150610921608087016108be565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b6000828210156109555761095561092d565b500390565b600181815b8085111561099557816000190482111561097b5761097b61092d565b8085161561098857918102915b93841c939080029061095f565b509250929050565b6000826109ac57506001610a3a565b816109b957506000610a3a565b81600181146109cf57600281146109d9576109f5565b6001915050610a3a565b60ff8411156109ea576109ea61092d565b50506001821b610a3a565b5060208310610133831016604e8410600b8410161715610a18575081810a610a3a565b610a22838361095a565b8060001904821115610a3657610a3661092d565b0290505b92915050565b6000610739838361099d565b6000816000190483118215151615610a6657610a6661092d565b50029056fea264697066735822122068fefea2c8a8c140d98a81d480a20b06adc587bc45e84dff015dc66941c9b56d64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "params": {
          "vBnbAddress": "The address of the vBNB",
          "vaiAddress": "The address of the VAI"
        }
      },
      "getFeedRegistryAddress()": {
        "returns": {
          "_0": "feedRegistryAddress Address of binance oracle feed registry."
        }
      },
      "getUnderlyingPrice(address)": {
        "params": {
          "vToken": "Address of the vToken"
        },
        "returns": {
          "_0": "Price in USD"
        }
      },
      "initialize(address)": {
        "params": {
          "_sidRegistryAddress": "Address of SID registry"
        }
      }
    },
    "stateVariables": {
      "vBnb": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "vai": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor for the implementation contract. Sets immutable variables."
      },
      "getFeedRegistryAddress()": {
        "notice": "Uses Space ID to fetch the feed registry address"
      },
      "getUnderlyingPrice(address)": {
        "notice": "Gets the price of a vToken from the binance oracle"
      },
      "initialize(address)": {
        "notice": "Sets the contracts required to fetch prices"
      },
      "vBnb()": {
        "notice": "vBNB address"
      },
      "vai()": {
        "notice": "VAI address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 347,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 350,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7034,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "sidRegistryAddress",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
