{
  "address": "0x5b6c86d6111E010aC62cf74E55D489455806B22A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calledContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "methodSignature",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "asset",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxStalePeriod",
          "type": "uint256"
        }
      ],
      "name": "MaxStalePeriodAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlManager",
          "type": "address"
        }
      ],
      "name": "NewAccessControlManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "overriddenSymbol",
          "type": "string"
        }
      ],
      "name": "SymbolOverridden",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BNB_ADDR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract IAccessControlManagerV8",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeedRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sidRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_accessControlManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "maxStalePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_maxStalePeriod",
          "type": "uint256"
        }
      ],
      "name": "setMaxStalePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "overrideSymbol",
          "type": "string"
        }
      ],
      "name": "setSymbolOverride",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sidRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "symbols",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa40e606297b1bfdc82b5a2b8e3b1a6beedf0b0680a8e04008e63cdfdff04c701",
  "receipt": {
    "to": null,
    "from": "0xFEA1c651A47FE29dB9b1bf3cC1f224d8D9CFF68C",
    "contractAddress": "0x5b6c86d6111E010aC62cf74E55D489455806B22A",
    "transactionIndex": 1,
    "gasUsed": "1395048",
    "logsBloom": "0x
    "blockHash": "0x3fbffcbcfc8f74d9398c10bbaf01c32736d049598f2ba86922ca024f2b77273d",
    "transactionHash": "0xa40e606297b1bfdc82b5a2b8e3b1a6beedf0b0680a8e04008e63cdfdff04c701",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 4204999,
        "transactionHash": "0xa40e606297b1bfdc82b5a2b8e3b1a6beedf0b0680a8e04008e63cdfdff04c701",
        "address": "0x5b6c86d6111E010aC62cf74E55D489455806B22A",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x3fbffcbcfc8f74d9398c10bbaf01c32736d049598f2ba86922ca024f2b77273d"
      }
    ],
    "blockNumber": 4204999,
    "cumulativeGasUsed": "1498568",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b4962e27443e3bf2f87d1cfaf12c7854",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calledContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxStalePeriod\",\"type\":\"uint256\"}],\"name\":\"MaxStalePeriodAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlManager\",\"type\":\"address\"}],\"name\":\"NewAccessControlManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"overriddenSymbol\",\"type\":\"string\"}],\"name\":\"SymbolOverridden\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNB_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManagerV8\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeedRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sidRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessControlManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"maxStalePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxStalePeriod\",\"type\":\"uint256\"}],\"name\":\"setMaxStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"overrideSymbol\",\"type\":\"string\"}],\"name\":\"setSymbolOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sidRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getFeedRegistryAddress()\":{\"returns\":{\"_0\":\"feedRegistryAddress Address of binance oracle feed registry.\"}},\"getPrice(address)\":{\"params\":{\"asset\":\"Address of the asset\"},\"returns\":{\"_0\":\"Price in USD\"}},\"initialize(address,address)\":{\"params\":{\"_accessControlManager\":\"Address of the access control manager contract\",\"_sidRegistryAddress\":\"Address of SID registry\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAccessControlManager(address)\":{\"custom:access\":\"Only Governance\",\"custom:event\":\"Emits NewAccessControlManager event\",\"details\":\"Admin function to set address of AccessControlManager\",\"params\":{\"accessControlManager_\":\"The new address of the AccessControlManager\"}},\"setMaxStalePeriod(string,uint256)\":{\"params\":{\"_maxStalePeriod\":\"The max stake period\",\"symbol\":\"The symbol of the asset\"}},\"setSymbolOverride(string,string)\":{\"params\":{\"overrideSymbol\":\"The symbol after override\",\"symbol\":\"The symbol to override\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"title\":\"BinanceOracle\",\"version\":1},\"userdoc\":{\"errors\":{\"Unauthorized(address,address,string)\":[{\"notice\":\"Thrown when the action is prohibited by AccessControlManager\"}]},\"events\":{\"NewAccessControlManager(address,address)\":{\"notice\":\"Emitted when access control manager contract address is changed\"}},\"kind\":\"user\",\"methods\":{\"BNB_ADDR()\":{\"notice\":\"Set this as asset address for BNB. This is the underlying address for vBNB\"},\"accessControlManager()\":{\"notice\":\"Returns the address of the access control manager contract\"},\"constructor\":{\"notice\":\"Constructor for the implementation contract.\"},\"getFeedRegistryAddress()\":{\"notice\":\"Uses Space ID to fetch the feed registry address\"},\"getPrice(address)\":{\"notice\":\"Gets the price of a asset from the binance oracle\"},\"initialize(address,address)\":{\"notice\":\"Sets the contracts required to fetch prices\"},\"maxStalePeriod(string)\":{\"notice\":\"Max stale period configuration for assets\"},\"setAccessControlManager(address)\":{\"notice\":\"Sets the address of AccessControlManager\"},\"setMaxStalePeriod(string,uint256)\":{\"notice\":\"Used to set the max stale period of an asset\"},\"setSymbolOverride(string,string)\":{\"notice\":\"Used to override a symbol when fetching price\"},\"symbols(string)\":{\"notice\":\"Override symbols to be compatible with Binance feed registry\"}},\"notice\":\"This oracle fetches price of assets from Binance.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/BinanceOracle.sol\":\"BinanceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\nimport \\\"./IAccessControlManagerV8.sol\\\";\\n\\n/**\\n * @title Venus Access Control Contract.\\n * @dev The AccessControlledV8 contract is a wrapper around the OpenZeppelin AccessControl contract\\n *      It provides a standardized way to control access to methods within the Venus Smart Contract Ecosystem.\\n *      The contract allows the owner to set an AccessControlManager contract address.\\n *      It can restrict method calls based on the sender's role and the method's signature.\\n */\\n\\nabstract contract AccessControlledV8 is Initializable, Ownable2StepUpgradeable {\\n    /// @notice Access control manager contract\\n    IAccessControlManagerV8 private _accessControlManager;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when access control manager contract address is changed\\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\\n\\n    /// @notice Thrown when the action is prohibited by AccessControlManager\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    function __AccessControlled_init(address accessControlManager_) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __AccessControlled_init_unchained(accessControlManager_);\\n    }\\n\\n    function __AccessControlled_init_unchained(address accessControlManager_) internal onlyInitializing {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of AccessControlManager\\n     * @dev Admin function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     * @custom:event Emits NewAccessControlManager event\\n     * @custom:access Only Governance\\n     */\\n    function setAccessControlManager(address accessControlManager_) external onlyOwner {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the access control manager contract\\n     */\\n    function accessControlManager() external view returns (IAccessControlManagerV8) {\\n        return _accessControlManager;\\n    }\\n\\n    /**\\n     * @dev Internal function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     */\\n    function _setAccessControlManager(address accessControlManager_) internal {\\n        require(address(accessControlManager_) != address(0), \\\"invalid acess control manager address\\\");\\n        address oldAccessControlManager = address(_accessControlManager);\\n        _accessControlManager = IAccessControlManagerV8(accessControlManager_);\\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Reverts if the call is not allowed by AccessControlManager\\n     * @param signature Method signature\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x618d942756b93e02340a42f3c80aa99fc56be1a96861f5464dc23a76bf30b3a5\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x41deef84d1839590b243b66506691fde2fb938da01eabde53e82d3b8316fdaf9\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/FeedRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface FeedRegistryInterface {\\n    function latestRoundDataByName(\\n        string memory base,\\n        string memory quote\\n    )\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function decimalsByName(string memory base, string memory quote) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x326a2ae7b1ecfc3671ff569363a39c35f7430b13c545d388a0d9d8e29dd5bdb3\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x40031b19684ca0c912e794d08c2c0b0d8be77d3c1bdc937830a0658eff899650\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/PublicResolverInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n// SPDX-FileCopyrightText: 2022 Venus\\npragma solidity 0.8.13;\\n\\ninterface PublicResolverInterface {\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xdacc261d23a3170a731f5a22377b452f227ebd0e54c7356278b271b55f82455d\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/SIDRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n// SPDX-FileCopyrightText: 2022 Venus\\npragma solidity 0.8.13;\\n\\ninterface SIDRegistryInterface {\\n    function resolver(bytes32 node) external view returns (address);\\n}\\n\",\"keccak256\":\"0x62bc5b95d657a1a8c64a1231510c3e8da7b6a71cb4bde7cd624854cd46f08a49\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/VBep20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface VBep20Interface is IERC20Metadata {\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    function underlying() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3f845cd51b2d82f7932ac6c0ab714df97f733b01ce50f6fb0adb4c28447d4618\",\"license\":\"BSD-3-Clause\"},\"contracts/oracles/BinanceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/VBep20Interface.sol\\\";\\nimport \\\"../interfaces/SIDRegistryInterface.sol\\\";\\nimport \\\"../interfaces/FeedRegistryInterface.sol\\\";\\nimport \\\"../interfaces/PublicResolverInterface.sol\\\";\\nimport \\\"../interfaces/OracleInterface.sol\\\";\\nimport \\\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\\\";\\nimport \\\"../interfaces/OracleInterface.sol\\\";\\n\\n/**\\n * @title BinanceOracle\\n * @author Venus\\n * @notice This oracle fetches price of assets from Binance.\\n */\\ncontract BinanceOracle is AccessControlledV8, OracleInterface {\\n    address public sidRegistryAddress;\\n\\n    /// @notice Set this as asset address for BNB. This is the underlying address for vBNB\\n    address public constant BNB_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n    /// @notice Max stale period configuration for assets\\n    mapping(string => uint256) public maxStalePeriod;\\n\\n    /// @notice Override symbols to be compatible with Binance feed registry\\n    mapping(string => string) public symbols;\\n\\n    event MaxStalePeriodAdded(string indexed asset, uint256 maxStalePeriod);\\n\\n    event SymbolOverridden(string indexed symbol, string overriddenSymbol);\\n\\n    /**\\n     * @notice Checks whether an address is null or not\\n     */\\n    modifier notNullAddress(address someone) {\\n        if (someone == address(0)) revert(\\\"can't be zero address\\\");\\n        _;\\n    }\\n\\n    /// @notice Constructor for the implementation contract.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Used to set the max stale period of an asset\\n     * @param symbol The symbol of the asset\\n     * @param _maxStalePeriod The max stake period\\n     */\\n    function setMaxStalePeriod(string memory symbol, uint256 _maxStalePeriod) external {\\n        _checkAccessAllowed(\\\"setMaxStalePeriod(string,uint256)\\\");\\n        if (_maxStalePeriod == 0) revert(\\\"stale period can't be zero\\\");\\n        if (bytes(symbol).length == 0) revert(\\\"symbol cannot be empty\\\");\\n\\n        maxStalePeriod[symbol] = _maxStalePeriod;\\n        emit MaxStalePeriodAdded(symbol, _maxStalePeriod);\\n    }\\n\\n    /**\\n     * @notice Used to override a symbol when fetching price\\n     * @param symbol The symbol to override\\n     * @param overrideSymbol The symbol after override\\n     */\\n    function setSymbolOverride(string calldata symbol, string calldata overrideSymbol) external {\\n        _checkAccessAllowed(\\\"setSymbolOverride(string,string)\\\");\\n        if (bytes(symbol).length == 0) revert(\\\"symbol cannot be empty\\\");\\n\\n        symbols[symbol] = overrideSymbol;\\n        emit SymbolOverridden(symbol, overrideSymbol);\\n    }\\n\\n    /**\\n     * @notice Sets the contracts required to fetch prices\\n     * @param _sidRegistryAddress Address of SID registry\\n     * @param _accessControlManager Address of the access control manager contract\\n     */\\n    function initialize(\\n        address _sidRegistryAddress,\\n        address _accessControlManager\\n    ) external initializer notNullAddress(_sidRegistryAddress) {\\n        sidRegistryAddress = _sidRegistryAddress;\\n        __AccessControlled_init(_accessControlManager);\\n    }\\n\\n    /**\\n     * @notice Uses Space ID to fetch the feed registry address\\n     * @return feedRegistryAddress Address of binance oracle feed registry.\\n     */\\n    function getFeedRegistryAddress() public view returns (address) {\\n        bytes32 nodeHash = 0x94fe3821e0768eb35012484db4df61890f9a6ca5bfa984ef8ff717e73139faff;\\n\\n        SIDRegistryInterface sidRegistry = SIDRegistryInterface(sidRegistryAddress);\\n        address publicResolverAddress = sidRegistry.resolver(nodeHash);\\n        PublicResolverInterface publicResolver = PublicResolverInterface(publicResolverAddress);\\n\\n        return publicResolver.addr(nodeHash);\\n    }\\n\\n    /**\\n     * @notice Gets the price of a asset from the binance oracle\\n     * @param asset Address of the asset\\n     * @return Price in USD\\n     */\\n    function getPrice(address asset) public view returns (uint256) {\\n        string memory symbol;\\n        uint256 decimals;\\n\\n        if (asset == BNB_ADDR) {\\n            symbol = \\\"BNB\\\";\\n            decimals = 18;\\n        } else {\\n            IERC20Metadata token = IERC20Metadata(asset);\\n            symbol = token.symbol();\\n            decimals = token.decimals();\\n        }\\n\\n        string memory overrideSymbol = symbols[symbol];\\n\\n        if (bytes(overrideSymbol).length != 0) {\\n            symbol = overrideSymbol;\\n        }\\n\\n        return _getPrice(symbol, decimals);\\n    }\\n\\n    function _getPrice(string memory symbol, uint256 decimals) internal view returns (uint256) {\\n        FeedRegistryInterface feedRegistry = FeedRegistryInterface(getFeedRegistryAddress());\\n\\n        (, int256 answer, , uint256 updatedAt, ) = feedRegistry.latestRoundDataByName(symbol, \\\"USD\\\");\\n        if (answer <= 0) revert(\\\"invalid binance oracle price\\\");\\n        if (block.timestamp < updatedAt) revert(\\\"updatedAt exceeds block time\\\");\\n\\n        uint256 deltaTime;\\n        unchecked {\\n            deltaTime = block.timestamp - updatedAt;\\n        }\\n        if (deltaTime > maxStalePeriod[symbol]) revert(\\\"binance oracle price expired\\\");\\n\\n        uint256 decimalDelta = feedRegistry.decimalsByName(symbol, \\\"USD\\\");\\n        return (uint256(answer) * (10 ** (18 - decimalDelta))) * (10 ** (18 - decimals));\\n    }\\n}\\n\",\"keccak256\":\"0x1c86079210814f31a73389bb67af4d45392b4f8bac592f4f5d0611e268cf161f\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6117c9806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806379ba509711610097578063b4a0bdf311610066578063b4a0bdf31461020c578063e30c39781461021d578063f2fde38b1461022e578063fdfbc2771461024157600080fd5b806379ba5097146101d85780638da5cb5b146101e057806399fe040e146101f15780639eab1ad6146101f957600080fd5b8063475e7de5116100d3578063475e7de514610197578063485cc955146101aa578063636b999a146101bd578063715018a6146101d057600080fd5b8063047a74b2146101055780630e32cb861461012e5780633e83b6b81461014357806341976e0914610176575b600080fd5b610118610113366004611177565b61026c565b6040516101259190611210565b60405180910390f35b61014161013c36600461123f565b610311565b005b61015e73bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb81565b6040516001600160a01b039091168152602001610125565b61018961018436600461123f565b610325565b604051908152602001610125565b60c95461015e906001600160a01b031681565b6101416101b836600461125c565b610513565b6101416101cb366004611295565b610697565b6101416107bf565b6101416107d3565b6033546001600160a01b031661015e565b61015e61084a565b610141610207366004611323565b610958565b6097546001600160a01b031661015e565b6065546001600160a01b031661015e565b61014161023c36600461123f565b610a66565b61018961024f366004611177565b805160208183018101805160ca8252928201919093012091525481565b805160208183018101805160cb82529282019190930120915280546102909061138f565b80601f01602080910402602001604051908101604052809291908181526020018280546102bc9061138f565b80156103095780601f106102de57610100808354040283529160200191610309565b820191906000526020600020905b8154815290600101906020018083116102ec57829003601f168201915b505050505081565b610319610ad7565b61032281610b31565b50565b600060608173bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbba196001600160a01b0385160161037257505060408051808201909152600381526221272160e91b60208201526012610448565b6000849050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103dd91908101906113c9565b9250806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190611437565b60ff169150505b600060cb8360405161045a919061145a565b908152602001604051809103902080546104739061138f565b80601f016020809104026020016040519081016040528092919081815260200182805461049f9061138f565b80156104ec5780601f106104c1576101008083540402835291602001916104ec565b820191906000526020600020905b8154815290600101906020018083116104cf57829003601f168201915b505050505090508051600014610500578092505b61050a8383610bf6565b95945050505050565b600054610100900460ff16158080156105335750600054600160ff909116105b8061054d5750303b15801561054d575060005460ff166001145b6105b55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156105d8576000805461ff0019166101001790555b826001600160a01b0381166106275760405162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b60448201526064016105ac565b60c980546001600160a01b0319166001600160a01b03861617905561064b83610e52565b508015610692576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6106b860405180606001604052806021815260200161177360219139610e8a565b806000036107085760405162461bcd60e51b815260206004820152601a60248201527f7374616c6520706572696f642063616e2774206265207a65726f00000000000060448201526064016105ac565b81516000036107525760405162461bcd60e51b815260206004820152601660248201527573796d626f6c2063616e6e6f7420626520656d70747960501b60448201526064016105ac565b8060ca83604051610763919061145a565b9081526040519081900360200181209190915561078190839061145a565b604051908190038120828252907f37839d4a80c5e3f2578f59515c911ee8cce42383d7ebaa1c92afcde9871c4b589060200160405180910390a25050565b6107c7610ad7565b6107d16000610f28565b565b60655433906001600160a01b031681146108415760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016105ac565b61032281610f28565b60c954604051630178b8bf60e01b81527f94fe3821e0768eb35012484db4df61890f9a6ca5bfa984ef8ff717e73139faff6004820181905260009290916001600160a01b039091169083908290630178b8bf90602401602060405180830381865afa1580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e19190611476565b604051631d9dabef60e11b81526004810185905290915081906001600160a01b03821690633b3b57de90602401602060405180830381865afa15801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f9190611476565b94505050505090565b6109966040518060400160405280602081526020017f73657453796d626f6c4f7665727269646528737472696e672c737472696e6729815250610e8a565b60008390036109e05760405162461bcd60e51b815260206004820152601660248201527573796d626f6c2063616e6e6f7420626520656d70747960501b60448201526064016105ac565b818160cb86866040516109f4929190611493565b908152604051908190036020019020610a0e929091611019565b508383604051610a1f929190611493565b60405180910390207fceb1f47aa91b96f02ea70e1deed25fe154ad1885aea509bd7222f9eec0a0bda58383604051610a589291906114a3565b60405180910390a250505050565b610a6e610ad7565b606580546001600160a01b0383166001600160a01b03199091168117909155610a9f6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6033546001600160a01b031633146107d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ac565b6001600160a01b038116610b955760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b60648201526084016105ac565b609780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0910160405180910390a15050565b600080610c0161084a565b9050600080826001600160a01b031663bfda5e71876040518263ffffffff1660e01b8152600401610c3291906114d2565b60a060405180830381865afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190611529565b5093505092505060008213610cca5760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642062696e616e6365206f7261636c652070726963650000000060448201526064016105ac565b80421015610d1a5760405162461bcd60e51b815260206004820152601c60248201527f757064617465644174206578636565647320626c6f636b2074696d650000000060448201526064016105ac565b6000814203905060ca87604051610d31919061145a565b908152602001604051809103902054811115610d8f5760405162461bcd60e51b815260206004820152601c60248201527f62696e616e6365206f7261636c6520707269636520657870697265640000000060448201526064016105ac565b604051633748ccad60e11b81526000906001600160a01b03861690636e91995a90610dbe908b906004016114d2565b602060405180830381865afa158015610ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dff9190611437565b60ff169050610e0f87601261158f565b610e1a90600a61168a565b610e2582601261158f565b610e3090600a61168a565b610e3a9086611696565b610e449190611696565b955050505050505b92915050565b600054610100900460ff16610e795760405162461bcd60e51b81526004016105ac906116b5565b610e81610f41565b61032281610f70565b6097546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab90610ebd9033908690600401611700565b602060405180830381865afa158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe9190611724565b905080610f2457333083604051634a3fa29360e01b81526004016105ac93929190611746565b5050565b606580546001600160a01b031916905561032281610f97565b600054610100900460ff16610f685760405162461bcd60e51b81526004016105ac906116b5565b6107d1610fe9565b600054610100900460ff166103195760405162461bcd60e51b81526004016105ac906116b5565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166110105760405162461bcd60e51b81526004016105ac906116b5565b6107d133610f28565b8280546110259061138f565b90600052602060002090601f016020900481019282611047576000855561108d565b82601f106110605782800160ff1982351617855561108d565b8280016001018555821561108d579182015b8281111561108d578235825591602001919060010190611072565b5061109992915061109d565b5090565b5b80821115611099576000815560010161109e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156110f1576110f16110b2565b604052919050565b600067ffffffffffffffff821115611113576111136110b2565b50601f01601f191660200190565b600082601f83011261113257600080fd5b8135611145611140826110f9565b6110c8565b81815284602083860101111561115a57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561118957600080fd5b813567ffffffffffffffff8111156111a057600080fd5b6111ac84828501611121565b949350505050565b60005b838110156111cf5781810151838201526020016111b7565b838111156111de576000848401525b50505050565b600081518084526111fc8160208601602086016111b4565b601f01601f19169290920160200192915050565b60208152600061122360208301846111e4565b9392505050565b6001600160a01b038116811461032257600080fd5b60006020828403121561125157600080fd5b81356112238161122a565b6000806040838503121561126f57600080fd5b823561127a8161122a565b9150602083013561128a8161122a565b809150509250929050565b600080604083850312156112a857600080fd5b823567ffffffffffffffff8111156112bf57600080fd5b6112cb85828601611121565b95602094909401359450505050565b60008083601f8401126112ec57600080fd5b50813567ffffffffffffffff81111561130457600080fd5b60208301915083602082850101111561131c57600080fd5b9250929050565b6000806000806040858703121561133957600080fd5b843567ffffffffffffffff8082111561135157600080fd5b61135d888389016112da565b9096509450602087013591508082111561137657600080fd5b50611383878288016112da565b95989497509550505050565b600181811c908216806113a357607f821691505b6020821081036113c357634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156113db57600080fd5b815167ffffffffffffffff8111156113f257600080fd5b8201601f8101841361140357600080fd5b8051611411611140826110f9565b81815285602083850101111561142657600080fd5b61050a8260208301602086016111b4565b60006020828403121561144957600080fd5b815160ff8116811461122357600080fd5b6000825161146c8184602087016111b4565b9190910192915050565b60006020828403121561148857600080fd5b81516112238161122a565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6040815260006114e560408301846111e4565b828103602084015260038152621554d160ea1b60208201526040810191505092915050565b805169ffffffffffffffffffff8116811461152457600080fd5b919050565b600080600080600060a0868803121561154157600080fd5b61154a8661150a565b945060208601519350604086015192506060860151915061156d6080870161150a565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b6000828210156115a1576115a1611579565b500390565b600181815b808511156115e15781600019048211156115c7576115c7611579565b808516156115d457918102915b93841c93908002906115ab565b509250929050565b6000826115f857506001610e4c565b8161160557506000610e4c565b816001811461161b576002811461162557611641565b6001915050610e4c565b60ff84111561163657611636611579565b50506001821b610e4c565b5060208310610133831016604e8410600b8410161715611664575081810a610e4c565b61166e83836115a6565b806000190482111561168257611682611579565b029392505050565b600061122383836115e9565b60008160001904831182151516156116b0576116b0611579565b500290565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03831681526040602082018190526000906111ac908301846111e4565b60006020828403121561173657600080fd5b8151801515811461122357600080fd5b6001600160a01b0384811682528316602082015260606040820181905260009061050a908301846111e456fe7365744d61785374616c65506572696f6428737472696e672c75696e7432353629a2646970667358221220b14620f75369c0982fe05cba14641df0daf08e7346f94bebaaaa3a052ddd221c64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806379ba509711610097578063b4a0bdf311610066578063b4a0bdf31461020c578063e30c39781461021d578063f2fde38b1461022e578063fdfbc2771461024157600080fd5b806379ba5097146101d85780638da5cb5b146101e057806399fe040e146101f15780639eab1ad6146101f957600080fd5b8063475e7de5116100d3578063475e7de514610197578063485cc955146101aa578063636b999a146101bd578063715018a6146101d057600080fd5b8063047a74b2146101055780630e32cb861461012e5780633e83b6b81461014357806341976e0914610176575b600080fd5b610118610113366004611177565b61026c565b6040516101259190611210565b60405180910390f35b61014161013c36600461123f565b610311565b005b61015e73bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb81565b6040516001600160a01b039091168152602001610125565b61018961018436600461123f565b610325565b604051908152602001610125565b60c95461015e906001600160a01b031681565b6101416101b836600461125c565b610513565b6101416101cb366004611295565b610697565b6101416107bf565b6101416107d3565b6033546001600160a01b031661015e565b61015e61084a565b610141610207366004611323565b610958565b6097546001600160a01b031661015e565b6065546001600160a01b031661015e565b61014161023c36600461123f565b610a66565b61018961024f366004611177565b805160208183018101805160ca8252928201919093012091525481565b805160208183018101805160cb82529282019190930120915280546102909061138f565b80601f01602080910402602001604051908101604052809291908181526020018280546102bc9061138f565b80156103095780601f106102de57610100808354040283529160200191610309565b820191906000526020600020905b8154815290600101906020018083116102ec57829003601f168201915b505050505081565b610319610ad7565b61032281610b31565b50565b600060608173bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbba196001600160a01b0385160161037257505060408051808201909152600381526221272160e91b60208201526012610448565b6000849050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103dd91908101906113c9565b9250806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190611437565b60ff169150505b600060cb8360405161045a919061145a565b908152602001604051809103902080546104739061138f565b80601f016020809104026020016040519081016040528092919081815260200182805461049f9061138f565b80156104ec5780601f106104c1576101008083540402835291602001916104ec565b820191906000526020600020905b8154815290600101906020018083116104cf57829003601f168201915b505050505090508051600014610500578092505b61050a8383610bf6565b95945050505050565b600054610100900460ff16158080156105335750600054600160ff909116105b8061054d5750303b15801561054d575060005460ff166001145b6105b55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156105d8576000805461ff0019166101001790555b826001600160a01b0381166106275760405162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b60448201526064016105ac565b60c980546001600160a01b0319166001600160a01b03861617905561064b83610e52565b508015610692576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6106b860405180606001604052806021815260200161177360219139610e8a565b806000036107085760405162461bcd60e51b815260206004820152601a60248201527f7374616c6520706572696f642063616e2774206265207a65726f00000000000060448201526064016105ac565b81516000036107525760405162461bcd60e51b815260206004820152601660248201527573796d626f6c2063616e6e6f7420626520656d70747960501b60448201526064016105ac565b8060ca83604051610763919061145a565b9081526040519081900360200181209190915561078190839061145a565b604051908190038120828252907f37839d4a80c5e3f2578f59515c911ee8cce42383d7ebaa1c92afcde9871c4b589060200160405180910390a25050565b6107c7610ad7565b6107d16000610f28565b565b60655433906001600160a01b031681146108415760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016105ac565b61032281610f28565b60c954604051630178b8bf60e01b81527f94fe3821e0768eb35012484db4df61890f9a6ca5bfa984ef8ff717e73139faff6004820181905260009290916001600160a01b039091169083908290630178b8bf90602401602060405180830381865afa1580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e19190611476565b604051631d9dabef60e11b81526004810185905290915081906001600160a01b03821690633b3b57de90602401602060405180830381865afa15801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f9190611476565b94505050505090565b6109966040518060400160405280602081526020017f73657453796d626f6c4f7665727269646528737472696e672c737472696e6729815250610e8a565b60008390036109e05760405162461bcd60e51b815260206004820152601660248201527573796d626f6c2063616e6e6f7420626520656d70747960501b60448201526064016105ac565b818160cb86866040516109f4929190611493565b908152604051908190036020019020610a0e929091611019565b508383604051610a1f929190611493565b60405180910390207fceb1f47aa91b96f02ea70e1deed25fe154ad1885aea509bd7222f9eec0a0bda58383604051610a589291906114a3565b60405180910390a250505050565b610a6e610ad7565b606580546001600160a01b0383166001600160a01b03199091168117909155610a9f6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6033546001600160a01b031633146107d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ac565b6001600160a01b038116610b955760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b60648201526084016105ac565b609780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0910160405180910390a15050565b600080610c0161084a565b9050600080826001600160a01b031663bfda5e71876040518263ffffffff1660e01b8152600401610c3291906114d2565b60a060405180830381865afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190611529565b5093505092505060008213610cca5760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642062696e616e6365206f7261636c652070726963650000000060448201526064016105ac565b80421015610d1a5760405162461bcd60e51b815260206004820152601c60248201527f757064617465644174206578636565647320626c6f636b2074696d650000000060448201526064016105ac565b6000814203905060ca87604051610d31919061145a565b908152602001604051809103902054811115610d8f5760405162461bcd60e51b815260206004820152601c60248201527f62696e616e6365206f7261636c6520707269636520657870697265640000000060448201526064016105ac565b604051633748ccad60e11b81526000906001600160a01b03861690636e91995a90610dbe908b906004016114d2565b602060405180830381865afa158015610ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dff9190611437565b60ff169050610e0f87601261158f565b610e1a90600a61168a565b610e2582601261158f565b610e3090600a61168a565b610e3a9086611696565b610e449190611696565b955050505050505b92915050565b600054610100900460ff16610e795760405162461bcd60e51b81526004016105ac906116b5565b610e81610f41565b61032281610f70565b6097546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab90610ebd9033908690600401611700565b602060405180830381865afa158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe9190611724565b905080610f2457333083604051634a3fa29360e01b81526004016105ac93929190611746565b5050565b606580546001600160a01b031916905561032281610f97565b600054610100900460ff16610f685760405162461bcd60e51b81526004016105ac906116b5565b6107d1610fe9565b600054610100900460ff166103195760405162461bcd60e51b81526004016105ac906116b5565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166110105760405162461bcd60e51b81526004016105ac906116b5565b6107d133610f28565b8280546110259061138f565b90600052602060002090601f016020900481019282611047576000855561108d565b82601f106110605782800160ff1982351617855561108d565b8280016001018555821561108d579182015b8281111561108d578235825591602001919060010190611072565b5061109992915061109d565b5090565b5b80821115611099576000815560010161109e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156110f1576110f16110b2565b604052919050565b600067ffffffffffffffff821115611113576111136110b2565b50601f01601f191660200190565b600082601f83011261113257600080fd5b8135611145611140826110f9565b6110c8565b81815284602083860101111561115a57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561118957600080fd5b813567ffffffffffffffff8111156111a057600080fd5b6111ac84828501611121565b949350505050565b60005b838110156111cf5781810151838201526020016111b7565b838111156111de576000848401525b50505050565b600081518084526111fc8160208601602086016111b4565b601f01601f19169290920160200192915050565b60208152600061122360208301846111e4565b9392505050565b6001600160a01b038116811461032257600080fd5b60006020828403121561125157600080fd5b81356112238161122a565b6000806040838503121561126f57600080fd5b823561127a8161122a565b9150602083013561128a8161122a565b809150509250929050565b600080604083850312156112a857600080fd5b823567ffffffffffffffff8111156112bf57600080fd5b6112cb85828601611121565b95602094909401359450505050565b60008083601f8401126112ec57600080fd5b50813567ffffffffffffffff81111561130457600080fd5b60208301915083602082850101111561131c57600080fd5b9250929050565b6000806000806040858703121561133957600080fd5b843567ffffffffffffffff8082111561135157600080fd5b61135d888389016112da565b9096509450602087013591508082111561137657600080fd5b50611383878288016112da565b95989497509550505050565b600181811c908216806113a357607f821691505b6020821081036113c357634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156113db57600080fd5b815167ffffffffffffffff8111156113f257600080fd5b8201601f8101841361140357600080fd5b8051611411611140826110f9565b81815285602083850101111561142657600080fd5b61050a8260208301602086016111b4565b60006020828403121561144957600080fd5b815160ff8116811461122357600080fd5b6000825161146c8184602087016111b4565b9190910192915050565b60006020828403121561148857600080fd5b81516112238161122a565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6040815260006114e560408301846111e4565b828103602084015260038152621554d160ea1b60208201526040810191505092915050565b805169ffffffffffffffffffff8116811461152457600080fd5b919050565b600080600080600060a0868803121561154157600080fd5b61154a8661150a565b945060208601519350604086015192506060860151915061156d6080870161150a565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b6000828210156115a1576115a1611579565b500390565b600181815b808511156115e15781600019048211156115c7576115c7611579565b808516156115d457918102915b93841c93908002906115ab565b509250929050565b6000826115f857506001610e4c565b8161160557506000610e4c565b816001811461161b576002811461162557611641565b6001915050610e4c565b60ff84111561163657611636611579565b50506001821b610e4c565b5060208310610133831016604e8410600b8410161715611664575081810a610e4c565b61166e83836115a6565b806000190482111561168257611682611579565b029392505050565b600061122383836115e9565b60008160001904831182151516156116b0576116b0611579565b500290565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03831681526040602082018190526000906111ac908301846111e4565b60006020828403121561173657600080fd5b8151801515811461122357600080fd5b6001600160a01b0384811682528316602082015260606040820181905260009061050a908301846111e456fe7365744d61785374616c65506572696f6428737472696e672c75696e7432353629a2646970667358221220b14620f75369c0982fe05cba14641df0daf08e7346f94bebaaaa3a052ddd221c64736f6c634300080d0033",
  "devdoc": {
    "author": "Venus",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getFeedRegistryAddress()": {
        "returns": {
          "_0": "feedRegistryAddress Address of binance oracle feed registry."
        }
      },
      "getPrice(address)": {
        "params": {
          "asset": "Address of the asset"
        },
        "returns": {
          "_0": "Price in USD"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_accessControlManager": "Address of the access control manager contract",
          "_sidRegistryAddress": "Address of SID registry"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAccessControlManager(address)": {
        "custom:access": "Only Governance",
        "custom:event": "Emits NewAccessControlManager event",
        "details": "Admin function to set address of AccessControlManager",
        "params": {
          "accessControlManager_": "The new address of the AccessControlManager"
        }
      },
      "setMaxStalePeriod(string,uint256)": {
        "params": {
          "_maxStalePeriod": "The max stake period",
          "symbol": "The symbol of the asset"
        }
      },
      "setSymbolOverride(string,string)": {
        "params": {
          "overrideSymbol": "The symbol after override",
          "symbol": "The symbol to override"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "title": "BinanceOracle",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Unauthorized(address,address,string)": [
        {
          "notice": "Thrown when the action is prohibited by AccessControlManager"
        }
      ]
    },
    "events": {
      "NewAccessControlManager(address,address)": {
        "notice": "Emitted when access control manager contract address is changed"
      }
    },
    "kind": "user",
    "methods": {
      "BNB_ADDR()": {
        "notice": "Set this as asset address for BNB. This is the underlying address for vBNB"
      },
      "accessControlManager()": {
        "notice": "Returns the address of the access control manager contract"
      },
      "constructor": {
        "notice": "Constructor for the implementation contract."
      },
      "getFeedRegistryAddress()": {
        "notice": "Uses Space ID to fetch the feed registry address"
      },
      "getPrice(address)": {
        "notice": "Gets the price of a asset from the binance oracle"
      },
      "initialize(address,address)": {
        "notice": "Sets the contracts required to fetch prices"
      },
      "maxStalePeriod(string)": {
        "notice": "Max stale period configuration for assets"
      },
      "setAccessControlManager(address)": {
        "notice": "Sets the address of AccessControlManager"
      },
      "setMaxStalePeriod(string,uint256)": {
        "notice": "Used to set the max stale period of an asset"
      },
      "setSymbolOverride(string,string)": {
        "notice": "Used to override a symbol when fetching price"
      },
      "symbols(string)": {
        "notice": "Override symbols to be compatible with Binance feed registry"
      }
    },
    "notice": "This oracle fetches price of assets from Binance.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 293,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 904,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 162,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 282,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 150,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2741,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IAccessControlManagerV8)2925"
      },
      {
        "astId": 2746,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4570,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "sidRegistryAddress",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 4579,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "maxStalePeriod",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 4584,
        "contract": "contracts/oracles/BinanceOracle.sol:BinanceOracle",
        "label": "symbols",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControlManagerV8)2925": {
        "encoding": "inplace",
        "label": "contract IAccessControlManagerV8",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}