/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace PythStructs {
  export type PriceStruct = {
    price: PromiseOrValue<BigNumberish>;
    conf: PromiseOrValue<BigNumberish>;
    expo: PromiseOrValue<BigNumberish>;
  };

  export type PriceStructOutput = [BigNumber, BigNumber, number] & {
    price: BigNumber;
    conf: BigNumber;
    expo: number;
  };
}

export interface IPythInterface extends utils.Interface {
  functions: {
    "getCurrentPrice(bytes32)": FunctionFragment;
    "getEmaPrice(bytes32)": FunctionFragment;
    "getLatestAvailablePriceUnsafe(bytes32)": FunctionFragment;
    "getLatestAvailablePriceWithinDuration(bytes32,uint64)": FunctionFragment;
    "getUpdateFee(uint256)": FunctionFragment;
    "updatePriceFeeds(bytes[])": FunctionFragment;
    "updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCurrentPrice"
      | "getEmaPrice"
      | "getLatestAvailablePriceUnsafe"
      | "getLatestAvailablePriceWithinDuration"
      | "getUpdateFee"
      | "updatePriceFeeds"
      | "updatePriceFeedsIfNecessary"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmaPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestAvailablePriceUnsafe",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestAvailablePriceWithinDuration",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeeds",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeedsIfNecessary",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmaPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestAvailablePriceUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestAvailablePriceWithinDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeedsIfNecessary",
    data: BytesLike
  ): Result;

  events: {
    "BatchPriceFeedUpdate(uint16,uint64,uint256,uint256)": EventFragment;
    "PriceFeedUpdate(bytes32,bool,uint16,uint64,uint64,uint64,int64,uint64)": EventFragment;
    "UpdatePriceFeeds(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchPriceFeedUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePriceFeeds"): EventFragment;
}

export interface BatchPriceFeedUpdateEventObject {
  chainId: number;
  sequenceNumber: BigNumber;
  batchSize: BigNumber;
  freshPricesInBatch: BigNumber;
}
export type BatchPriceFeedUpdateEvent = TypedEvent<
  [number, BigNumber, BigNumber, BigNumber],
  BatchPriceFeedUpdateEventObject
>;

export type BatchPriceFeedUpdateEventFilter =
  TypedEventFilter<BatchPriceFeedUpdateEvent>;

export interface PriceFeedUpdateEventObject {
  id: string;
  fresh: boolean;
  chainId: number;
  sequenceNumber: BigNumber;
  lastPublishTime: BigNumber;
  publishTime: BigNumber;
  price: BigNumber;
  conf: BigNumber;
}
export type PriceFeedUpdateEvent = TypedEvent<
  [
    string,
    boolean,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PriceFeedUpdateEventObject
>;

export type PriceFeedUpdateEventFilter = TypedEventFilter<PriceFeedUpdateEvent>;

export interface UpdatePriceFeedsEventObject {
  sender: string;
  batchCount: BigNumber;
  fee: BigNumber;
}
export type UpdatePriceFeedsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UpdatePriceFeedsEventObject
>;

export type UpdatePriceFeedsEventFilter =
  TypedEventFilter<UpdatePriceFeedsEvent>;

export interface IPyth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPythInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCurrentPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceStructOutput] & { price: PythStructs.PriceStructOutput }
    >;

    getEmaPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceStructOutput] & { price: PythStructs.PriceStructOutput }
    >;

    getLatestAvailablePriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceStructOutput, BigNumber] & {
        price: PythStructs.PriceStructOutput;
        publishTime: BigNumber;
      }
    >;

    getLatestAvailablePriceWithinDuration(
      id: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceStructOutput] & { price: PythStructs.PriceStructOutput }
    >;

    getUpdateFee(
      updateDataSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeAmount: BigNumber }>;

    updatePriceFeeds(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePriceFeedsIfNecessary(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getCurrentPrice(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythStructs.PriceStructOutput>;

  getEmaPrice(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythStructs.PriceStructOutput>;

  getLatestAvailablePriceUnsafe(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [PythStructs.PriceStructOutput, BigNumber] & {
      price: PythStructs.PriceStructOutput;
      publishTime: BigNumber;
    }
  >;

  getLatestAvailablePriceWithinDuration(
    id: PromiseOrValue<BytesLike>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PythStructs.PriceStructOutput>;

  getUpdateFee(
    updateDataSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updatePriceFeeds(
    updateData: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePriceFeedsIfNecessary(
    updateData: PromiseOrValue<BytesLike>[],
    priceIds: PromiseOrValue<BytesLike>[],
    publishTimes: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCurrentPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythStructs.PriceStructOutput>;

    getEmaPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythStructs.PriceStructOutput>;

    getLatestAvailablePriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceStructOutput, BigNumber] & {
        price: PythStructs.PriceStructOutput;
        publishTime: BigNumber;
      }
    >;

    getLatestAvailablePriceWithinDuration(
      id: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PythStructs.PriceStructOutput>;

    getUpdateFee(
      updateDataSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePriceFeeds(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceFeedsIfNecessary(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BatchPriceFeedUpdate(uint16,uint64,uint256,uint256)"(
      chainId?: null,
      sequenceNumber?: null,
      batchSize?: null,
      freshPricesInBatch?: null
    ): BatchPriceFeedUpdateEventFilter;
    BatchPriceFeedUpdate(
      chainId?: null,
      sequenceNumber?: null,
      batchSize?: null,
      freshPricesInBatch?: null
    ): BatchPriceFeedUpdateEventFilter;

    "PriceFeedUpdate(bytes32,bool,uint16,uint64,uint64,uint64,int64,uint64)"(
      id?: PromiseOrValue<BytesLike> | null,
      fresh?: PromiseOrValue<boolean> | null,
      chainId?: null,
      sequenceNumber?: null,
      lastPublishTime?: null,
      publishTime?: null,
      price?: null,
      conf?: null
    ): PriceFeedUpdateEventFilter;
    PriceFeedUpdate(
      id?: PromiseOrValue<BytesLike> | null,
      fresh?: PromiseOrValue<boolean> | null,
      chainId?: null,
      sequenceNumber?: null,
      lastPublishTime?: null,
      publishTime?: null,
      price?: null,
      conf?: null
    ): PriceFeedUpdateEventFilter;

    "UpdatePriceFeeds(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      batchCount?: null,
      fee?: null
    ): UpdatePriceFeedsEventFilter;
    UpdatePriceFeeds(
      sender?: PromiseOrValue<string> | null,
      batchCount?: null,
      fee?: null
    ): UpdatePriceFeedsEventFilter;
  };

  estimateGas: {
    getCurrentPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmaPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestAvailablePriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestAvailablePriceWithinDuration(
      id: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUpdateFee(
      updateDataSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePriceFeeds(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePriceFeedsIfNecessary(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmaPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestAvailablePriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestAvailablePriceWithinDuration(
      id: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpdateFee(
      updateDataSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePriceFeeds(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceFeedsIfNecessary(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
