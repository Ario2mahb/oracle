/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace VenusOracle {
  export type TokenConfigStruct = {
    oracles: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ];
    enableFlagsForOracles: [
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ];
  };

  export type TokenConfigStructOutput = [
    [string, string, string],
    [boolean, boolean, boolean]
  ] & {
    oracles: [string, string, string];
    enableFlagsForOracles: [boolean, boolean, boolean];
  };
}

export interface VenusOracleInterface extends utils.Interface {
  functions: {
    "INVALID_PRICE()": FunctionFragment;
    "addTokenConfig(address,(address[3],bool[3]))": FunctionFragment;
    "addTokenConfigs(address[],(address[3],bool[3])[])": FunctionFragment;
    "enableOracle(address,uint8,bool)": FunctionFragment;
    "getOracle(address,uint8)": FunctionFragment;
    "getTokenConfig(address)": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOracle(address,address,uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INVALID_PRICE"
      | "addTokenConfig"
      | "addTokenConfigs"
      | "enableOracle"
      | "getOracle"
      | "getTokenConfig"
      | "getUnderlyingPrice"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setOracle"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "INVALID_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenConfig",
    values: [PromiseOrValue<string>, VenusOracle.TokenConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenConfigs",
    values: [PromiseOrValue<string>[], VenusOracle.TokenConfigStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enableOracle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "INVALID_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "GlobalEnable(bool)": EventFragment;
    "OracleEnabled(address,uint256,bool)": EventFragment;
    "OracleSet(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "TokenConfigAdded(address,address,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GlobalEnable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenConfigAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface GlobalEnableEventObject {
  isEnable: boolean;
}
export type GlobalEnableEvent = TypedEvent<[boolean], GlobalEnableEventObject>;

export type GlobalEnableEventFilter = TypedEventFilter<GlobalEnableEvent>;

export interface OracleEnabledEventObject {
  vToken: string;
  role: BigNumber;
  enable: boolean;
}
export type OracleEnabledEvent = TypedEvent<
  [string, BigNumber, boolean],
  OracleEnabledEventObject
>;

export type OracleEnabledEventFilter = TypedEventFilter<OracleEnabledEvent>;

export interface OracleSetEventObject {
  vToken: string;
  oracle: string;
  role: BigNumber;
}
export type OracleSetEvent = TypedEvent<
  [string, string, BigNumber],
  OracleSetEventObject
>;

export type OracleSetEventFilter = TypedEventFilter<OracleSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TokenConfigAddedEventObject {
  token: string;
  mainOracle: string;
  pivotOracle: string;
  fallbackOracle: string;
}
export type TokenConfigAddedEvent = TypedEvent<
  [string, string, string, string],
  TokenConfigAddedEventObject
>;

export type TokenConfigAddedEventFilter =
  TypedEventFilter<TokenConfigAddedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface VenusOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VenusOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INVALID_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTokenConfig(
      vToken: PromiseOrValue<string>,
      tokenConfig: VenusOracle.TokenConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTokenConfigs(
      vTokens: PromiseOrValue<string>[],
      tokenConfigs_: VenusOracle.TokenConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableOracle(
      vToken: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOracle(
      vToken: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { oracle: string; enabled: boolean }>;

    getTokenConfig(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[VenusOracle.TokenConfigStructOutput]>;

    getUnderlyingPrice(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      vToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  addTokenConfig(
    vToken: PromiseOrValue<string>,
    tokenConfig: VenusOracle.TokenConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTokenConfigs(
    vTokens: PromiseOrValue<string>[],
    tokenConfigs_: VenusOracle.TokenConfigStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableOracle(
    vToken: PromiseOrValue<string>,
    role: PromiseOrValue<BigNumberish>,
    enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOracle(
    vToken: PromiseOrValue<string>,
    role: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { oracle: string; enabled: boolean }>;

  getTokenConfig(
    vToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<VenusOracle.TokenConfigStructOutput>;

  getUnderlyingPrice(
    vToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    vToken: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    role: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenConfig(
      vToken: PromiseOrValue<string>,
      tokenConfig: VenusOracle.TokenConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenConfigs(
      vTokens: PromiseOrValue<string>[],
      tokenConfigs_: VenusOracle.TokenConfigStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    enableOracle(
      vToken: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOracle(
      vToken: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { oracle: string; enabled: boolean }>;

    getTokenConfig(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<VenusOracle.TokenConfigStructOutput>;

    getUnderlyingPrice(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setOracle(
      vToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "GlobalEnable(bool)"(
      isEnable?: PromiseOrValue<boolean> | null
    ): GlobalEnableEventFilter;
    GlobalEnable(
      isEnable?: PromiseOrValue<boolean> | null
    ): GlobalEnableEventFilter;

    "OracleEnabled(address,uint256,bool)"(
      vToken?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      enable?: PromiseOrValue<boolean> | null
    ): OracleEnabledEventFilter;
    OracleEnabled(
      vToken?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      enable?: PromiseOrValue<boolean> | null
    ): OracleEnabledEventFilter;

    "OracleSet(address,address,uint256)"(
      vToken?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null
    ): OracleSetEventFilter;
    OracleSet(
      vToken?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null
    ): OracleSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "TokenConfigAdded(address,address,address,address)"(
      token?: PromiseOrValue<string> | null,
      mainOracle?: PromiseOrValue<string> | null,
      pivotOracle?: PromiseOrValue<string> | null,
      fallbackOracle?: null
    ): TokenConfigAddedEventFilter;
    TokenConfigAdded(
      token?: PromiseOrValue<string> | null,
      mainOracle?: PromiseOrValue<string> | null,
      pivotOracle?: PromiseOrValue<string> | null,
      fallbackOracle?: null
    ): TokenConfigAddedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenConfig(
      vToken: PromiseOrValue<string>,
      tokenConfig: VenusOracle.TokenConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTokenConfigs(
      vTokens: PromiseOrValue<string>[],
      tokenConfigs_: VenusOracle.TokenConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableOracle(
      vToken: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOracle(
      vToken: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenConfig(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrice(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracle(
      vToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INVALID_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokenConfig(
      vToken: PromiseOrValue<string>,
      tokenConfig: VenusOracle.TokenConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTokenConfigs(
      vTokens: PromiseOrValue<string>[],
      tokenConfigs_: VenusOracle.TokenConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableOracle(
      vToken: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOracle(
      vToken: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenConfig(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      vToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
