/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TokenConfigStruct = {
  pythId: PromiseOrValue<BytesLike>;
  vToken: PromiseOrValue<string>;
  maxStalePeriod: PromiseOrValue<BigNumberish>;
};

export type TokenConfigStructOutput = [string, string, BigNumber] & {
  pythId: string;
  vToken: string;
  maxStalePeriod: BigNumber;
};

export interface PythOracleInterface extends utils.Interface {
  functions: {
    "EXP_SCALE()": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTokenConfig((bytes32,address,uint64))": FunctionFragment;
    "setTokenConfigs((bytes32,address,uint64)[])": FunctionFragment;
    "setUnderlyingPythOracle(address)": FunctionFragment;
    "tokenConfigs(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlyingPythOracle()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXP_SCALE"
      | "getUnderlyingPrice"
      | "owner"
      | "renounceOwnership"
      | "setTokenConfig"
      | "setTokenConfigs"
      | "setUnderlyingPythOracle"
      | "tokenConfigs"
      | "transferOwnership"
      | "underlyingPythOracle"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "EXP_SCALE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [TokenConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfigs",
    values: [TokenConfigStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnderlyingPythOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenConfigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingPythOracle",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "EXP_SCALE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnderlyingPythOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingPythOracle",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PythOracleSet(address)": EventFragment;
    "TokenConfigAdded(address,bytes32,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PythOracleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenConfigAdded"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PythOracleSetEventObject {
  newPythOracle: string;
}
export type PythOracleSetEvent = TypedEvent<[string], PythOracleSetEventObject>;

export type PythOracleSetEventFilter = TypedEventFilter<PythOracleSetEvent>;

export interface TokenConfigAddedEventObject {
  vToken: string;
  pythId: string;
  maxStalePeriod: BigNumber;
}
export type TokenConfigAddedEvent = TypedEvent<
  [string, string, BigNumber],
  TokenConfigAddedEventObject
>;

export type TokenConfigAddedEventFilter =
  TypedEventFilter<TokenConfigAddedEvent>;

export interface PythOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PythOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXP_SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnderlyingPrice(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenConfig(
      tokenConfig: TokenConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenConfigs(
      tokenConfigs_: TokenConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUnderlyingPythOracle(
      underlyingPythOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        pythId: string;
        vToken: string;
        maxStalePeriod: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underlyingPythOracle(overrides?: CallOverrides): Promise<[string]>;
  };

  EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  getUnderlyingPrice(
    vToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenConfig(
    tokenConfig: TokenConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenConfigs(
    tokenConfigs_: TokenConfigStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUnderlyingPythOracle(
    underlyingPythOracle_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenConfigs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      pythId: string;
      vToken: string;
      maxStalePeriod: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underlyingPythOracle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingPrice(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTokenConfig(
      tokenConfig: TokenConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenConfigs(
      tokenConfigs_: TokenConfigStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUnderlyingPythOracle(
      underlyingPythOracle_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        pythId: string;
        vToken: string;
        maxStalePeriod: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingPythOracle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PythOracleSet(address)"(
      newPythOracle?: PromiseOrValue<string> | null
    ): PythOracleSetEventFilter;
    PythOracleSet(
      newPythOracle?: PromiseOrValue<string> | null
    ): PythOracleSetEventFilter;

    "TokenConfigAdded(address,bytes32,uint64)"(
      vToken?: PromiseOrValue<string> | null,
      pythId?: PromiseOrValue<BytesLike> | null,
      maxStalePeriod?: PromiseOrValue<BigNumberish> | null
    ): TokenConfigAddedEventFilter;
    TokenConfigAdded(
      vToken?: PromiseOrValue<string> | null,
      pythId?: PromiseOrValue<BytesLike> | null,
      maxStalePeriod?: PromiseOrValue<BigNumberish> | null
    ): TokenConfigAddedEventFilter;
  };

  estimateGas: {
    EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingPrice(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenConfig(
      tokenConfig: TokenConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenConfigs(
      tokenConfigs_: TokenConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUnderlyingPythOracle(
      underlyingPythOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underlyingPythOracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EXP_SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      vToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenConfig(
      tokenConfig: TokenConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenConfigs(
      tokenConfigs_: TokenConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUnderlyingPythOracle(
      underlyingPythOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underlyingPythOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
