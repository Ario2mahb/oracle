/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  VBEP20Harness,
  VBEP20HarnessInterface,
} from "../../../contracts/test/VBEP20Harness";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "underlying_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimalsInternal",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526005805460ff191660121790553480156200001e57600080fd5b5060405162000c7c38038062000c7c833981016040819052620000419162000224565b838383828281600390805190602001906200005e929190620000b1565b50805162000074906004906020840190620000b1565b5050600580546001600160a01b03909616610100026001600160a81b031990961660ff909316929092179490941790555062000304945050505050565b828054620000bf90620002c8565b90600052602060002090601f016020900481019282620000e357600085556200012e565b82601f10620000fe57805160ff19168380011785556200012e565b828001600101855582156200012e579182015b828111156200012e57825182559160200191906001019062000111565b506200013c92915062000140565b5090565b5b808211156200013c576000815560010162000141565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200017f57600080fd5b81516001600160401b03808211156200019c576200019c62000157565b604051601f8301601f19908116603f01168101908282118183101715620001c757620001c762000157565b81604052838152602092508683858801011115620001e457600080fd5b600091505b83821015620002085785820183015181830184015290820190620001e9565b838211156200021a5760008385830101525b9695505050505050565b600080600080608085870312156200023b57600080fd5b84516001600160401b03808211156200025357600080fd5b62000261888389016200016d565b955060208701519150808211156200027857600080fd5b5062000287878288016200016d565b935050604085015160ff811681146200029f57600080fd5b60608601519092506001600160a01b0381168114620002bd57600080fd5b939692955090935050565b600181811c90821680620002dd57607f821691505b602082108103620002fe57634e487b7160e01b600052602260045260246000fd5b50919050565b61096880620003146000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80634511bf6b1161008c57806395d89b411161006657806395d89b41146101dc578063a457c2d7146101e4578063a9059cbb146101f7578063dd62ed3e1461020a57600080fd5b80634511bf6b146101765780636f307dc31461018357806370a08231146101b357600080fd5b806323b872dd116100bd57806323b872dd14610137578063313ce5671461014a578063395093511461016357600080fd5b806306fdde03146100e4578063095ea7b31461010257806318160ddd14610125575b600080fd5b6100ec610243565b6040516100f991906107cf565b60405180910390f35b610115610110366004610840565b6102d5565b60405190151581526020016100f9565b6002545b6040519081526020016100f9565b61011561014536600461086a565b6102ed565b60055460ff165b60405160ff90911681526020016100f9565b610115610171366004610840565b610311565b6005546101519060ff1681565b60055461019b9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016100f9565b6101296101c13660046108a6565b6001600160a01b031660009081526020819052604090205490565b6100ec610350565b6101156101f2366004610840565b61035f565b610115610205366004610840565b61040e565b6101296102183660046108c8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b606060038054610252906108fb565b80601f016020809104026020016040519081016040528092919081815260200182805461027e906108fb565b80156102cb5780601f106102a0576101008083540402835291602001916102cb565b820191906000526020600020905b8154815290600101906020018083116102ae57829003601f168201915b5050505050905090565b6000336102e381858561041c565b5060019392505050565b6000336102fb858285610540565b6103068585856105d2565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906102e3908290869061034b908790610935565b61041c565b606060048054610252906108fb565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156104015760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610306828686840361041c565b6000336102e38185856105d2565b6001600160a01b03831661047e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103f8565b6001600160a01b0382166104df5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103f8565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146105cc57818110156105bf5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103f8565b6105cc848484840361041c565b50505050565b6001600160a01b03831661064e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103f8565b6001600160a01b0382166106b05760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103f8565b6001600160a01b0383166000908152602081905260409020548181101561073f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103f8565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610776908490610935565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107c291815260200190565b60405180910390a36105cc565b600060208083528351808285015260005b818110156107fc578581018301518582016040015282016107e0565b8181111561080e576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461083b57600080fd5b919050565b6000806040838503121561085357600080fd5b61085c83610824565b946020939093013593505050565b60008060006060848603121561087f57600080fd5b61088884610824565b925061089660208501610824565b9150604084013590509250925092565b6000602082840312156108b857600080fd5b6108c182610824565b9392505050565b600080604083850312156108db57600080fd5b6108e483610824565b91506108f260208401610824565b90509250929050565b600181811c9082168061090f57607f821691505b60208210810361092f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561095657634e487b7160e01b600052601160045260246000fd5b50019056fea164736f6c634300080d000a";

type VBEP20HarnessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VBEP20HarnessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VBEP20Harness__factory extends ContractFactory {
  constructor(...args: VBEP20HarnessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    underlying_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VBEP20Harness> {
    return super.deploy(
      name_,
      symbol_,
      decimals,
      underlying_,
      overrides || {}
    ) as Promise<VBEP20Harness>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    underlying_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals,
      underlying_,
      overrides || {}
    );
  }
  override attach(address: string): VBEP20Harness {
    return super.attach(address) as VBEP20Harness;
  }
  override connect(signer: Signer): VBEP20Harness__factory {
    return super.connect(signer) as VBEP20Harness__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VBEP20HarnessInterface {
    return new utils.Interface(_abi) as VBEP20HarnessInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VBEP20Harness {
    return new Contract(address, _abi, signerOrProvider) as VBEP20Harness;
  }
}
