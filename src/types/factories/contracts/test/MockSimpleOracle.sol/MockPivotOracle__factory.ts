/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockPivotOracle,
  MockPivotOracleInterface,
} from "../../../../contracts/test/MockSimpleOracle.sol/MockPivotOracle";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vToken",
        type: "address",
      },
    ],
    name: "getUnderlyingPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "prices",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vToken",
        type: "address",
      },
      {
        internalType: "bool",
        name: "pass",
        type: "bool",
      },
    ],
    name: "setValidateResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "validatePrice",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "validateResults",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610248806100206000396000f3fe608060405234801561001057600080fd5b50600436106100715760003560e01c8063cfed246b11610050578063cfed246b14610113578063fc57d4df14610141578063fd45a4331461016a57600080fd5b8062e4768b1461007657806379c5e512146100a2578063a050bcb3146100db575b600080fd5b6100a06100843660046101b3565b6001600160a01b03909116600090815260208190526040902055565b005b6100a06100b03660046101dd565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b6100fe6100e9366004610219565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b610133610121366004610219565b60006020819052908152604090205481565b60405190815260200161010a565b61013361014f366004610219565b6001600160a01b031660009081526020819052604090205490565b6100fe6101783660046101b3565b506001600160a01b031660009081526001602052604090205460ff1690565b80356001600160a01b03811681146101ae57600080fd5b919050565b600080604083850312156101c657600080fd5b6101cf83610197565b946020939093013593505050565b600080604083850312156101f057600080fd5b6101f983610197565b91506020830135801515811461020e57600080fd5b809150509250929050565b60006020828403121561022b57600080fd5b61023482610197565b939250505056fea164736f6c634300080d000a";

type MockPivotOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPivotOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPivotOracle__factory extends ContractFactory {
  constructor(...args: MockPivotOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockPivotOracle> {
    return super.deploy(overrides || {}) as Promise<MockPivotOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockPivotOracle {
    return super.attach(address) as MockPivotOracle;
  }
  override connect(signer: Signer): MockPivotOracle__factory {
    return super.connect(signer) as MockPivotOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPivotOracleInterface {
    return new utils.Interface(_abi) as MockPivotOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPivotOracle {
    return new Contract(address, _abi, signerOrProvider) as MockPivotOracle;
  }
}
