/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockSimpleOracle,
  MockSimpleOracleInterface,
} from "../../../../contracts/test/MockSimpleOracle.sol/MockSimpleOracle";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vToken",
        type: "address",
      },
    ],
    name: "getUnderlyingPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "prices",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610168806100206000396000f3fe608060405234801561001057600080fd5b50600436106100405760003560e01c8062e4768b14610045578063cfed246b1461007e578063fc57d4df146100b0575b600080fd5b61007c61005336600461010f565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260208190526040902055565b005b61009e61008c366004610139565b60006020819052908152604090205481565b60405190815260200160405180910390f35b61009e6100be366004610139565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b803573ffffffffffffffffffffffffffffffffffffffff8116811461010a57600080fd5b919050565b6000806040838503121561012257600080fd5b61012b836100e6565b946020939093013593505050565b60006020828403121561014b57600080fd5b610154826100e6565b939250505056fea164736f6c634300080d000a";

type MockSimpleOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSimpleOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSimpleOracle__factory extends ContractFactory {
  constructor(...args: MockSimpleOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockSimpleOracle> {
    return super.deploy(overrides || {}) as Promise<MockSimpleOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockSimpleOracle {
    return super.attach(address) as MockSimpleOracle;
  }
  override connect(signer: Signer): MockSimpleOracle__factory {
    return super.connect(signer) as MockSimpleOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSimpleOracleInterface {
    return new utils.Interface(_abi) as MockSimpleOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSimpleOracle {
    return new Contract(address, _abi, signerOrProvider) as MockSimpleOracle;
  }
}
